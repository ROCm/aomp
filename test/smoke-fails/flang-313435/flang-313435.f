# 1 "offl_ccsd_t_doubles_l.F"
C$Id$
# 3 "offl_ccsd_t_doubles_l.F"
c     Modifications (c) 2021 Advanced Micro Devices, Inc. All Rights Reserved.
# 19 "offl_ccsd_t_doubles_l.F"
C #ifndef DEBUG_TRIPLESX
C #define DEBUG_TRIPLESX 1
C #endif
# 96 "offl_ccsd_t_doubles_l.F"
      SUBROUTINE ccsd_t_doubles_l_12(d_a,k_a_offset,
# 98 "offl_ccsd_t_doubles_l.F"
     &d_b,k_b_offset,triplesx,t_p4
     &b,t_p5b,t_p6b,t_h1b,t_h2b,t_h3b,
     T     v2sub,t2sub,scratch)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = -1 * P( 9 ) * Sum ( h7 ) * t ( p4 p5 h1 h7 )_t * v ( h7 p6 h2 h3 )_v
c
c elimination of the transpositions (kowalski,august,2009)
c
      IMPLICIT NONE
# 108 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 4 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/macommon.h"
# 22 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/macommon.h"
                     
# 5 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      logical          ga_allocate
      logical          ga_deallocate
      complex          ga_cdot
      complex          ga_cdot_patch
      integer          ga_cluster_nnodes
      integer          ga_cluster_nodeid
      integer          ga_cluster_nprocs
      integer          ga_cluster_procid
      integer          ga_cluster_proc_nodeid
      logical          ga_compare_distr
      logical          ga_create
      integer          ga_create_handle
      logical          ga_create_irreg
      logical          ga_create_mutexes
      double precision ga_ddot
      double precision ga_ddot_patch
      logical          ga_destroy
      logical          ga_destroy_mutexes
      logical          ga_duplicate
      logical          ga_get_debug
      integer          ga_get_dimension
      integer          ga_get_pgroup
      integer          ga_get_pgroup_size
      logical          ga_has_ghosts
      integer          ga_idot
      logical          ga_initialized
      integer          ga_inquire_memory
      integer          ga_is_mirrored
      integer          ga_llt_solve
      logical          ga_locate
      logical          ga_locate_region
      integer          ga_memory_avail
      logical          ga_memory_limited
      integer          ga_nbtest
      integer          ga_ndim
      integer          ga_nnodes
      integer          ga_nodeid
      logical          ga_overlay
      integer          ga_pgroup_absolute_id
      integer          ga_pgroup_create
      integer          ga_pgroup_duplicate
      integer          ga_pgroup_self
      logical          ga_pgroup_destroy
      integer          ga_pgroup_get_default
      integer          ga_pgroup_get_mirror
      integer          ga_pgroup_get_world
      integer          ga_pgroup_nnodes
      integer          ga_pgroup_nodeid
      integer          ga_pgroup_split
      integer          ga_pgroup_split_irreg
      integer          ga_read_inc
      real             ga_sdot
      real             ga_sdot_patch
      logical          ga_set_update4_info
      logical          ga_set_update5_info
      integer          ga_solve
      integer          ga_spd_invert
      integer          ga_total_blocks
      logical          ga_update2_ghosts
      logical          ga_update3_ghosts
      logical          ga_update4_ghosts
      logical          ga_update5_ghosts
      logical          ga_update6_ghosts
      logical          ga_update7_ghosts
      logical          ga_uses_ma
      logical          ga_uses_proc_grid
      logical          ga_valid_handle
      logical          ga_verify_handle
      double precision ga_wtime
      double complex   ga_zdot
      double complex   ga_zdot_patch
      logical          nga_allocate
      logical          nga_deallocate
      complex          nga_cdot
      complex          nga_cdot_patch
      integer          nga_cluster_nnodes
      integer          nga_cluster_nodeid
      integer          nga_cluster_nprocs
      integer          nga_cluster_procid
      integer          nga_cluster_proc_nodeid
      logical          nga_compare_distr
      logical          nga_create
      logical          nga_create_config
      logical          nga_create_ghosts
      logical          nga_create_ghosts_config
      logical          nga_create_ghosts_irreg
      logical          nga_create_ghosts_irreg_config
      integer          nga_create_handle
      logical          nga_create_irreg
      logical          nga_create_irreg_config
      logical          nga_create_mutexes
      double precision nga_ddot
      double precision nga_ddot_patch
      integer          nga_deregister_type
      logical          nga_destroy
      logical          nga_destroy_mutexes
      logical          nga_duplicate
      logical          nga_get_debug
      integer          nga_get_dimension
      integer          nga_get_pgroup
      integer          nga_get_pgroup_size
      logical          nga_has_ghosts
      integer          nga_idot
      integer          nga_idot_patch
      logical          nga_initialized
      integer          nga_inquire_memory
      integer          nga_is_mirrored
      integer          nga_llt_solve
      logical          nga_locate
      integer          nga_locate_num_blocks
      logical          nga_locate_region
      integer          nga_memory_avail
      logical          nga_memory_limited
      integer          nga_nbtest
      integer          nga_ndim
      integer          nga_nnodes
      integer          nga_nodeid
      logical          nga_overlay
      integer          nga_pgroup_absolute_id
      integer          nga_pgroup_create
      integer          nga_pgroup_duplicate
      integer          nga_pgroup_self
      logical          nga_pgroup_destroy
      integer          nga_pgroup_get_default
      integer          nga_pgroup_get_mirror
      integer          nga_pgroup_get_world
      integer          nga_pgroup_nnodes
      integer          nga_pgroup_nodeid
      integer          nga_pgroup_split
      integer          nga_pgroup_split_irreg
      integer          nga_read_inc
      integer          nga_register_type
      real             nga_sdot
      real             nga_sdot_patch
      logical          nga_set_update4_info
      logical          nga_set_update5_info
      integer          nga_solve
      integer          nga_spd_invert
      integer          nga_total_blocks
      logical          nga_update2_ghosts
      logical          nga_update3_ghosts
      logical          nga_update4_ghosts
      logical          nga_update5_ghosts
      logical          nga_update6_ghosts
      logical          nga_update7_ghosts
      logical          nga_update_ghost_dir
      logical          nga_uses_ma
      logical          nga_uses_proc_grid
      logical          nga_valid_handle
      logical          nga_verify_handle
      double precision nga_wtime
      double complex   nga_zdot
      double complex   nga_zdot_patch
!
      external ga_allocate
      external ga_deallocate
      external ga_cdot
      external ga_cdot_patch
      external ga_cluster_nnodes
      external ga_cluster_nodeid
      external ga_cluster_nprocs
      external ga_cluster_procid
      external ga_cluster_proc_nodeid
      external ga_compare_distr
      external ga_create
      external ga_create_handle
      external ga_create_irreg
      external ga_create_mutexes
      external ga_ddot
      external ga_ddot_patch
      external ga_destroy
      external ga_destroy_mutexes
      external ga_duplicate
      external ga_get_debug
      external ga_get_dimension
      external ga_get_pgroup
      external ga_get_pgroup_size
      external ga_has_ghosts
      external ga_idot
      external ga_initialized
      external ga_inquire_memory
      external ga_is_mirrored
      external ga_llt_solve
      external ga_locate
      external ga_locate_region
      external ga_memory_avail
      external ga_memory_limited
      external ga_nbtest
      external ga_ndim
      external ga_nnodes
      external ga_nodeid
      external ga_overlay
      external ga_pgroup_absolute_id
      external ga_pgroup_create
      external ga_pgroup_duplicate
      external ga_pgroup_self
      external ga_pgroup_destroy
      external ga_pgroup_get_default
      external ga_pgroup_get_mirror
      external ga_pgroup_get_world
      external ga_pgroup_nnodes
      external ga_pgroup_nodeid
      external ga_pgroup_split
      external ga_pgroup_split_irreg
      external ga_read_inc
      external ga_sdot
      external ga_sdot_patch
      external ga_set_update4_info
      external ga_set_update5_info
      external ga_solve
      external ga_spd_invert
      external ga_total_blocks
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_uses_ma
      external ga_uses_proc_grid
      external ga_valid_handle
      external ga_verify_handle
      external ga_wtime
      external ga_zdot
      external ga_zdot_patch
      external nga_allocate
      external nga_deallocate
      external nga_cdot
      external nga_cdot_patch
      external nga_cluster_nnodes
      external nga_cluster_nodeid
      external nga_cluster_nprocs
      external nga_cluster_procid
      external nga_cluster_proc_nodeid
      external nga_compare_distr
      external nga_create
      external nga_create_config
      external nga_create_ghosts
      external nga_create_ghosts_config
      external nga_create_ghosts_irreg
      external nga_create_ghosts_irreg_config
      external nga_create_handle
      external nga_create_irreg
      external nga_create_irreg_config
      external nga_create_mutexes
      external nga_ddot
      external nga_ddot_patch
      external nga_deregister_type
      external nga_destroy
      external nga_destroy_mutexes
      external nga_duplicate
      external nga_get_debug
      external nga_get_dimension
      external nga_get_field
      external nga_get_pgroup
      external nga_get_pgroup_size
      external nga_has_ghosts
      external nga_idot
      external nga_idot_patch
      external nga_initialized
      external nga_inquire_memory
      external nga_is_mirrored
      external nga_llt_solve
      external nga_locate
      external nga_locate_num_blocks
      external nga_locate_region
      external nga_memory_avail
      external nga_memory_limited
      external nga_nbget_field
      external nga_nbput_field
      external nga_nbtest
      external nga_ndim
      external nga_nnodes
      external nga_nodeid
      external nga_overlay
      external nga_pgroup_absolute_id
      external nga_pgroup_create
      external nga_pgroup_duplicate
      external nga_pgroup_self
      external nga_pgroup_destroy
      external nga_pgroup_get_default
      external nga_pgroup_get_mirror
      external nga_pgroup_get_world
      external nga_pgroup_nnodes
      external nga_pgroup_nodeid
      external nga_pgroup_split
      external nga_pgroup_split_irreg
      external nga_put_field
      external nga_read_inc
      external nga_register_type
      external nga_sdot
      external nga_sdot_patch
      external nga_set_update4_info
      external nga_set_update5_info
      external nga_solve
      external nga_spd_invert
      external nga_total_blocks
      external nga_update2_ghosts
      external nga_update3_ghosts
      external nga_update4_ghosts
      external nga_update5_ghosts
      external nga_update6_ghosts
      external nga_update7_ghosts
      external nga_update_ghost_dir
      external nga_uses_ma
      external nga_uses_proc_grid
      external nga_valid_handle
      external nga_verify_handle
      external nga_wtime
      external nga_zdot
      external nga_zdot_patch
!
# 109 "offl_ccsd_t_doubles_l.F"
# 109 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 4 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     $Id: mafdecls.fh,v 1.11 2002-09-14 05:40:30 d3g001 Exp $
!
# 8 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     Public header file for a portable dynamic memory allocator.
!
!     This file may be included by internal and external FORTRAN files.
!
# 14 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/macommon.h"
# 15 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 16 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     The guard ends here instead of at the end of the file because we only
!     need the cpp constants (stuff above) defined once per FORTRAN file,
!     but need the declarations (stuff below) to be defined each time this
!     file is included in a FORTRAN file.
!
# 25 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     constants
!
# 29 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex
# 38 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type
# 41 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))
# 50 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)
# 53 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     function types
!
# 58 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff
# 90 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff
# 123 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     variables
!
# 130 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     common blocks
# 137 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_byte/ byte_mb(2)
      character*1       byte_mb
# 145 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_int/  int_mb(2)
      integer           int_mb
# 150 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_log/  log_mb(2)
      logical           log_mb
# 158 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_real/ real_mb(2)
      real              real_mb
# 166 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dbl/  dbl_mb(2)
      double precision  dbl_mb
# 174 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_scpl/ scpl_mb(2)
      complex           scpl_mb
# 182 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dcpl/ dcpl_mb(2)
      double complex    dcpl_mb
# 110 "offl_ccsd_t_doubles_l.F"
# 110 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/sym.fh"
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id$
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 111 "offl_ccsd_t_doubles_l.F"
# 111 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/errquit.fh"
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id$
# 112 "offl_ccsd_t_doubles_l.F"
# 112 "offl_ccsd_t_doubles_l.F"
# 1 "../include/tce.fh"
c
c $Id$
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor
      integer ea_unused_spin,ea_unused_sym
      integer ip_unused_spin,ip_unused_sym
# 89 "../include/tce.fh"
      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e,
     6  ea_unused_spin,ea_unused_sym,
     7  ip_unused_spin,ip_unused_sym
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd
# 104 "../include/tce.fh"
      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 113 "offl_ccsd_t_doubles_l.F"
# 113 "offl_ccsd_t_doubles_l.F"
# 1 "./ccsd_t_ps.fh"
C$Id$
c
c     pstat handles for the TCE code
c
      integer ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
     
# 32 "./ccsd_t_ps.fh"
      logical otceps            ! True if gathering stats
      common /tceps/ otceps,
     $     ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
# 60 "./ccsd_t_ps.fh"
c
# 114 "offl_ccsd_t_doubles_l.F"
# 114 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/printlevels.fh"
      integer print_none, print_low, print_medium, print_high, 
     $     print_debug, print_default, print_never
C$Id$
      parameter (print_none=0, print_low=10, print_medium=20,
     $     print_high=30, print_debug=100, print_never=1000000)
      parameter (print_default = print_medium)
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
c      
C$Id$
      logical util_print
      double precision util_cpusec
      double precision util_wallsec
      double precision util_random
      integer util_batch_job_time_remaining
      integer util_time_remaining
      logical util_test_time_remaining
      logical util_nwchemrc_get
      logical util_module_avail
      external util_print
      external util_cpusec
      external util_wallsec
      external util_random
      external util_batch_job_time_remaining
      external util_time_remaining
      external util_test_time_remaining
      external util_nwchemrc_get
      external util_module_avail
c
      logical util_xyz_seek
      external util_xyz_seek
      logical util_xyz_nframes
      external util_xyz_nframes
c
      logical util_get_io_unit
      external util_get_io_unit
c
      integer nw_max_path_len   ! Maximum path len -> posix standard is what?
      parameter (nw_max_path_len = 255)
c
# 115 "offl_ccsd_t_doubles_l.F"
# 115 "offl_ccsd_t_doubles_l.F"
# 1 "../include/offl.fh"
C$Id$
# 4 "../include/offl.fh"
CCC#define ASYNC 1
c k_a_sort t2sub
c k_b_sort v2sub
      integer	triplesx_mxlgth
# 116 "offl_ccsd_t_doubles_l.F"
# 116 "offl_ccsd_t_doubles_l.F"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p4b
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b,p7b
      integer p5b_2,p7b_1,h2b_1,p7b_2
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER p6b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b
      INTEGER k_b
c -- peta-exa --
      INTEGER a3(9,6)
      INTEGER ia6,ja6
c --------------
      DOUBLE PRECISION triplesx(*)
c --------------
      INTEGER k_range_h3b_1
      INTEGER k_range_h2b_1
      INTEGER k_range_h1b_1
      INTEGER k_range_p6b_1
      INTEGER k_range_p5b_1
      INTEGER k_range_p4b_1
      INTEGER k_range_h7b_1
      INTEGER k_range_p7b_1
      INTEGER k_a_srt_len
      INTEGER k_b_srt_len
C #ifdef OFFLOAD_CODE
      integer l_t2sub,l_triplesx,l_v2sub
C #endif
      double precision t2sub(*),v2sub(*),scratch(*)
      logical tce_hashnsort,lresult
      external tce_hashnsort
      logical tce_hashnsort_2
      external tce_hashnsort_2
      integer n_h7b
      integer n_p7b
      double precision t0
      integer deltat_mic,deltat_off
# 183 "offl_ccsd_t_doubles_l.F"
      double precision omp_get_wtime
      external omp_get_wtime
# 186 "offl_ccsd_t_doubles_l.F"
      integer h7b_in,p7b_in
# 188 "offl_ccsd_t_doubles_l.F"
C #ifdef OFFLOAD_CODE
cfrom l_triplesx
      l_triplesx=
     c int_mb(k_range+t_h3b-1)*
     c int_mb(k_range+t_h2b-1)*
     c int_mb(k_range+t_h1b-1)*
     c int_mb(k_range+t_p6b-1)*
     c int_mb(k_range+t_p5b-1)*
     c int_mb(k_range+t_p4b-1)
      call ccsd_t_v2t2lgth(l_t2sub,l_v2sub)
C #endif
# 200 "offl_ccsd_t_doubles_l.F"
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h1b
        a3(2,6)=t_h3b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h3b
        a3(3,5)=t_h1b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p6b
        a3(4,3)=t_p4b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p6b
        a3(5,3)=t_p4b
        a3(5,4)=t_h2b
        a3(5,5)=t_h1b
        a3(5,6)=t_h3b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p6b
        a3(6,3)=t_p4b
        a3(6,4)=t_h3b
        a3(6,5)=t_h1b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p4b
        a3(7,2)=t_p6b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p4b
        a3(8,2)=t_p6b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h1b
        a3(8,6)=t_h3b
c
        a3(9,1)=t_p4b
        a3(9,2)=t_p6b
        a3(9,3)=t_p5b
        a3(9,4)=t_h3b
        a3(9,5)=t_h1b
        a3(9,6)=t_h2b
c
# 264 "offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") ':'
# 267 "offl_ccsd_t_doubles_l.F"
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
      enddo
c
# 294 "offl_ccsd_t_doubles_l.F"
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p4b.le.p5b).and.(h2b.le.h3b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
# 312 "offl_ccsd_t_doubles_l.F"
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
c
c
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
# 325 "offl_ccsd_t_doubles_l.F"
c     prep. work
c     figure out  cycles to work on
      n_h7b=0
      DO h7b = 1,noab
         if(tce_hashnsort(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p5b,h1b,h7b,
     I        p6b,h2b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_h7b=n_h7b+1
         endif
      enddo
# 340 "offl_ccsd_t_doubles_l.F"
      if(n_h7b.gt.0) then
# 345 "offl_ccsd_t_doubles_l.F"
         do h7b_in=ga_nodeid()+1,ga_nodeid()+noab
            h7b=mod(h7b_in,noab)+1
# 348 "offl_ccsd_t_doubles_l.F"
            if(tce_hashnsort(.false.,
     d           d_a, d_b,
     I           k_a_offset,k_b_offset,
     I           p4b,p5b,h1b,h7b,
     I           p6b,h2b,h3b,
     O           t2sub,v2sub)) then
            k_range_h7b_1 = int_mb(k_range+h7b-1)
# 356 "offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") '+'
# 370 "offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 381 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_1(k_range_h3b_1,k_range_h2b_1,
# 383 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     d     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl11,fdist_sdcomp11)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 402 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_2(k_range_h3b_1,k_range_h2b_1,
# 404 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl12,fdist_sdcomp12)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c      call tce_sdtime0(t0)
# 423 "offl_ccsd_t_doubles_l.F"
      call sdtransp_t_d1_3(k_range_h3b_1,k_range_h2b_1,
# 425 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl13,fdist_sdcomp13)
       END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 444 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_4(k_range_h3b_1,k_range_h2b_1,
# 446 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl14,fdist_sdcomp14)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c      call tce_sdtime0(t0)
# 465 "offl_ccsd_t_doubles_l.F"
      call sdtransp_t_d1_5(k_range_h3b_1,k_range_h2b_1,
# 467 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl15,fdist_sdcomp15)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 486 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_6(k_range_h3b_1,k_range_h2b_1,
# 488 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl16,fdist_sdcomp16)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 507 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_7(k_range_h3b_1,k_range_h2b_1,
# 509 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl17,fdist_sdcomp17)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 528 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_8(k_range_h3b_1,k_range_h2b_1,
# 530 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl18,fdist_sdcomp18)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 549 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_9(k_range_h3b_1,k_range_h2b_1,
# 551 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl19,fdist_sdcomp19)
      END IF
# 568 "offl_ccsd_t_doubles_l.F"
      endif
      END DO !h7b loop
      endif ! n_h7b.ne.0
c
c
      END IF
      END DO !ia6 loop
# 576 "offl_ccsd_t_doubles_l.F"
cold      SUBROUTINE ccsd_t_doubles_l_2(d_a,k_a_offset,
c
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h3b
        a3(2,6)=t_h1b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h1b
        a3(3,5)=t_h3b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p4b
        a3(4,3)=t_p6b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p4b
        a3(5,3)=t_p6b
        a3(5,4)=t_h2b
        a3(5,5)=t_h3b
        a3(5,6)=t_h1b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p4b
        a3(6,3)=t_p6b
        a3(6,4)=t_h1b
        a3(6,5)=t_h3b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p6b
        a3(7,2)=t_p4b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p6b
        a3(8,2)=t_p4b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h3b
        a3(8,6)=t_h1b
c
        a3(9,1)=t_p6b
        a3(9,2)=t_p4b
        a3(9,3)=t_p5b
        a3(9,4)=t_h1b
        a3(9,5)=t_h3b
        a3(9,6)=t_h2b
c
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
        enddo
c
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p5b.le.p6b).and.(h1b.le.h2b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
c     prep. work
c     figure out  cycles to work on
      n_p7b=0
      DO p7b = noab+1,noab+nvab
         if(tce_hashnsort_2(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_p7b=n_p7b+1
         endif
      enddo
# 701 "offl_ccsd_t_doubles_l.F"
      if(n_p7b.ne.0) then
# 706 "offl_ccsd_t_doubles_l.F"
      do p7b_in= ga_nodeid()+1,nvab+ga_nodeid()
         p7b=mod(p7b_in,nvab)+noab+1
# 709 "offl_ccsd_t_doubles_l.F"
         if(tce_hashnsort_2(.false.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub)) then
# 716 "offl_ccsd_t_doubles_l.F"
            k_range_p7b_1 = int_mb(k_range+p7b-1)
# 718 "offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '='
# 728 "offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 739 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_1(k_range_h3b_1,k_range_h2b_1,
# 741 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl21,fdist_sdcomp21)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 760 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_2(k_range_h3b_1,k_range_h2b_1,
# 762 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl22,fdist_sdcomp22)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 781 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_3(k_range_h3b_1,k_range_h2b_1,
# 783 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl23,fdist_sdcomp23)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 802 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_4(k_range_h3b_1,k_range_h2b_1,
# 804 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl24,fdist_sdcomp24)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
# 816 "offl_ccsd_t_doubles_l.F"
c        call tce_sdtime0(t0)
# 824 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_5(k_range_h3b_1,k_range_h2b_1,
# 826 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl25,fdist_sdcomp25)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 845 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_6(k_range_h3b_1,k_range_h2b_1,
# 847 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl26,fdist_sdcomp26)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 866 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_7(k_range_h3b_1,k_range_h2b_1,
# 868 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl27,fdist_sdcomp27)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 887 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_8(k_range_h3b_1,k_range_h2b_1,
# 889 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl28,fdist_sdcomp28)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 908 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_9(k_range_h3b_1,k_range_h2b_1,
# 910 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl29,fdist_sdcomp29)
      END IF
# 927 "offl_ccsd_t_doubles_l.F"
      endif
      END DO ! p7b loop
# 930 "offl_ccsd_t_doubles_l.F"
      endif ! n_p7b.ne.0
c
c
      END IF
      END DO ! ia6 loop
# 950 "offl_ccsd_t_doubles_l.F"
      RETURN
      END
# 956 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 958 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 968 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 976 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 977 "offl_ccsd_t_doubles_l.F"
# 985 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 987 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
cz!DEC$ unroll_and_jam (2)
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h3d*h2d
       triplesx(h2h3,h1,p6,p5,p4)=triplesx(h2h3,h1,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1008 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1010 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1011 "offl_ccsd_t_doubles_l.F"
# 1011 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1017 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1019 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1029 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision v2sub(*)
# 1039 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1041 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1042 "offl_ccsd_t_doubles_l.F"
# 1042 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1046 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1048 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1058 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(4)
# 1060 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1083 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1085 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1086 "offl_ccsd_t_doubles_l.F"
# 1086 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1092 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1094 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1104 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1106 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p6d,p5d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
c      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1117 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1119 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1120 "offl_ccsd_t_doubles_l.F"
# 1120 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1124 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1126 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1136 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h3h2,h1,h7) collapse(3)
# 1138 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p6,p5,p4)=triplesx(h1,h3h2,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1160 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1162 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1163 "offl_ccsd_t_doubles_l.F"
# 1163 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1169 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1171 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1181 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1183 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1190 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1191 "offl_ccsd_t_doubles_l.F"
# 1199 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 1201 "offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p4,p6)=triplesx(h2h3,h1,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1220 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1222 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1223 "offl_ccsd_t_doubles_l.F"
# 1223 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1229 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1231 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     d     deltat)
# 1241 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1243 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1252 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1254 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1255 "offl_ccsd_t_doubles_l.F"
# 1255 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1259 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1261 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1271 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h3,h2,h1,h7) collapse(3)
# 1273 "offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p4,p6)=triplesx(h3,h1,h2,p5,p4,p6)
     1    + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1298 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1300 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1301 "offl_ccsd_t_doubles_l.F"
# 1301 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1307 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1309 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1319 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1321 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h1d,h3d*h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1331 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1333 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1334 "offl_ccsd_t_doubles_l.F"
# 1334 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1338 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1340 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1350 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h3,h1,h7) collapse(3)
# 1352 "offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h2h3=1,h2d*h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h2h3,p5,p4,p6)=triplesx(h1,h2h3,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h2h3,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1373 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1375 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1376 "offl_ccsd_t_doubles_l.F"
# 1376 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1382 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 1384 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1394 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1396 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1403 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1404 "offl_ccsd_t_doubles_l.F"
# 1412 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 1414 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p6,p4)=triplesx(h2h3,h1,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1433 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1435 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1436 "offl_ccsd_t_doubles_l.F"
# 1436 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1442 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 1444 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1454 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
      double precision scratch(h7d,h3d,h2d,p6d)
# 1464 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1466 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1467 "offl_ccsd_t_doubles_l.F"
# 1467 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1471 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1473 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1483 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 1485 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p6,p4)=triplesx(h3,h1,h2,p5,p6,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1509 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1511 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1512 "offl_ccsd_t_doubles_l.F"
# 1512 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1518 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 1520 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1530 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1532 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p5d,p6d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1542 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1544 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1545 "offl_ccsd_t_doubles_l.F"
# 1545 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1549 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1551 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1561 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h3h2,h1,h7) collapse(3)
# 1563 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p5,p6,p4)=triplesx(h1,h3h2,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1584 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1586 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1587 "offl_ccsd_t_doubles_l.F"
# 1587 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1593 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 1595 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1605 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1607 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1615 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1617 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1618 "offl_ccsd_t_doubles_l.F"
# 1621 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1623 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1633 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h1,h3,p7) collapse(3)
# 1635 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1658 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1660 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1661 "offl_ccsd_t_doubles_l.F"
# 1661 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1667 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1669 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1679 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1681 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p5d,p4d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1690 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2
# 1692 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1693 "offl_ccsd_t_doubles_l.F"
# 1693 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1697 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2(
# 1699 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1709 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h1,h3,p7) collapse(3)
# 1711 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p5,p4)=triplesx(h2h1,h3,p6,p5,p4)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1731 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1733 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1734 "offl_ccsd_t_doubles_l.F"
# 1734 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1740 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1742 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1752 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1754 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d)
# 1763 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1765 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1766 "offl_ccsd_t_doubles_l.F"
# 1766 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1770 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1772 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 1782 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 1784 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p5,p4)=triplesx(h2,h3,h1,p6,p5,p4) +
     C        scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1807 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1809 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1810 "offl_ccsd_t_doubles_l.F"
# 1810 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1816 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1818 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1828 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1830 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p4d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1838 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1840 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1841 "offl_ccsd_t_doubles_l.F"
# 1841 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1845 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1847 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1857 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h1,h3,p7) collapse(4)
# 1859 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p4,p5)=triplesx(h3,h2,h1,p6,p4,p5)
     1   + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1883 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1885 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1886 "offl_ccsd_t_doubles_l.F"
# 1886 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1892 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1894 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1904 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1906 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p4d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1915 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2
# 1917 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1918 "offl_ccsd_t_doubles_l.F"
# 1918 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1922 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2(
# 1924 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1934 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h1,h3,p7) collapse(3)
# 1936 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p4,p5)=triplesx(h2h1,h3,p6,p4,p5)
     1   + scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1957 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1959 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1960 "offl_ccsd_t_doubles_l.F"
# 1960 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1966 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1968 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1978 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1980 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1989 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1991 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1992 "offl_ccsd_t_doubles_l.F"
# 1995 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1997 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2007 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 2009 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p4,p5)=triplesx(h2,h3,h1,p6,p4,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2031 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2033 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2034 "offl_ccsd_t_doubles_l.F"
# 2034 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2040 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 2042 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2052 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2054 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2063 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 2065 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2066 "offl_ccsd_t_doubles_l.F"
# 2066 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2070 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 2072 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2082 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 2084 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p4,p6,p5)=triplesx(h3,h2,h1,p4,p6,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2107 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2109 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2110 "offl_ccsd_t_doubles_l.F"
# 2110 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2116 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 2118 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2128 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2130 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p4d,p6d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2139 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2
# 2141 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2142 "offl_ccsd_t_doubles_l.F"
# 2145 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2(
# 2147 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 2157 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h1,h3,p7) collapse(3)
# 2159 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p4,p6,p5)=triplesx(h2h1,h3,p4,p6,p5)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2180 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2182 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2183 "offl_ccsd_t_doubles_l.F"
# 2183 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2189 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 2191 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2201 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2203 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2212 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 2214 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2215 "offl_ccsd_t_doubles_l.F"
# 2215 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2219 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 2221 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2231 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 2233 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p4,p6,p5)=triplesx(h2,h3,h1,p4,p6,p5)
     1    + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2256 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2258 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2259 "offl_ccsd_t_doubles_l.F"
# 2259 "offl_ccsd_t_doubles_l.F"
      return
      end
# 2265 "offl_ccsd_t_doubles_l.F"
c
c     Compile source again for offload code
c
# 2268 "offl_ccsd_t_doubles_l.F"
# 1 "./offl_ccsd_t_doubles_l.F"
C$Id$
# 3 "./offl_ccsd_t_doubles_l.F"
c     Modifications (c) 2021 Advanced Micro Devices, Inc. All Rights Reserved.
# 19 "./offl_ccsd_t_doubles_l.F"
C #ifndef DEBUG_TRIPLESX
C #define DEBUG_TRIPLESX 1
C #endif
# 76 "./offl_ccsd_t_doubles_l.F"
c     the mapping functions won't be needed
# 94 "./offl_ccsd_t_doubles_l.F"
      SUBROUTINE offl0_ccsd_t_doubles_l_12(d_a,k_a_offset,
# 98 "./offl_ccsd_t_doubles_l.F"
     &d_b,k_b_offset,triplesx,t_p4
     &b,t_p5b,t_p6b,t_h1b,t_h2b,t_h3b,
     T     v2sub,t2sub,scratch)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = -1 * P( 9 ) * Sum ( h7 ) * t ( p4 p5 h1 h7 )_t * v ( h7 p6 h2 h3 )_v
c
c elimination of the transpositions (kowalski,august,2009)
c
      IMPLICIT NONE
# 108 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      logical          ga_allocate
      logical          ga_deallocate
      complex          ga_cdot
      complex          ga_cdot_patch
      integer          ga_cluster_nnodes
      integer          ga_cluster_nodeid
      integer          ga_cluster_nprocs
      integer          ga_cluster_procid
      integer          ga_cluster_proc_nodeid
      logical          ga_compare_distr
      logical          ga_create
      integer          ga_create_handle
      logical          ga_create_irreg
      logical          ga_create_mutexes
      double precision ga_ddot
      double precision ga_ddot_patch
      logical          ga_destroy
      logical          ga_destroy_mutexes
      logical          ga_duplicate
      logical          ga_get_debug
      integer          ga_get_dimension
      integer          ga_get_pgroup
      integer          ga_get_pgroup_size
      logical          ga_has_ghosts
      integer          ga_idot
      logical          ga_initialized
      integer          ga_inquire_memory
      integer          ga_is_mirrored
      integer          ga_llt_solve
      logical          ga_locate
      logical          ga_locate_region
      integer          ga_memory_avail
      logical          ga_memory_limited
      integer          ga_nbtest
      integer          ga_ndim
      integer          ga_nnodes
      integer          ga_nodeid
      logical          ga_overlay
      integer          ga_pgroup_absolute_id
      integer          ga_pgroup_create
      integer          ga_pgroup_duplicate
      integer          ga_pgroup_self
      logical          ga_pgroup_destroy
      integer          ga_pgroup_get_default
      integer          ga_pgroup_get_mirror
      integer          ga_pgroup_get_world
      integer          ga_pgroup_nnodes
      integer          ga_pgroup_nodeid
      integer          ga_pgroup_split
      integer          ga_pgroup_split_irreg
      integer          ga_read_inc
      real             ga_sdot
      real             ga_sdot_patch
      logical          ga_set_update4_info
      logical          ga_set_update5_info
      integer          ga_solve
      integer          ga_spd_invert
      integer          ga_total_blocks
      logical          ga_update2_ghosts
      logical          ga_update3_ghosts
      logical          ga_update4_ghosts
      logical          ga_update5_ghosts
      logical          ga_update6_ghosts
      logical          ga_update7_ghosts
      logical          ga_uses_ma
      logical          ga_uses_proc_grid
      logical          ga_valid_handle
      logical          ga_verify_handle
      double precision ga_wtime
      double complex   ga_zdot
      double complex   ga_zdot_patch
      logical          nga_allocate
      logical          nga_deallocate
      complex          nga_cdot
      complex          nga_cdot_patch
      integer          nga_cluster_nnodes
      integer          nga_cluster_nodeid
      integer          nga_cluster_nprocs
      integer          nga_cluster_procid
      integer          nga_cluster_proc_nodeid
      logical          nga_compare_distr
      logical          nga_create
      logical          nga_create_config
      logical          nga_create_ghosts
      logical          nga_create_ghosts_config
      logical          nga_create_ghosts_irreg
      logical          nga_create_ghosts_irreg_config
      integer          nga_create_handle
      logical          nga_create_irreg
      logical          nga_create_irreg_config
      logical          nga_create_mutexes
      double precision nga_ddot
      double precision nga_ddot_patch
      integer          nga_deregister_type
      logical          nga_destroy
      logical          nga_destroy_mutexes
      logical          nga_duplicate
      logical          nga_get_debug
      integer          nga_get_dimension
      integer          nga_get_pgroup
      integer          nga_get_pgroup_size
      logical          nga_has_ghosts
      integer          nga_idot
      integer          nga_idot_patch
      logical          nga_initialized
      integer          nga_inquire_memory
      integer          nga_is_mirrored
      integer          nga_llt_solve
      logical          nga_locate
      integer          nga_locate_num_blocks
      logical          nga_locate_region
      integer          nga_memory_avail
      logical          nga_memory_limited
      integer          nga_nbtest
      integer          nga_ndim
      integer          nga_nnodes
      integer          nga_nodeid
      logical          nga_overlay
      integer          nga_pgroup_absolute_id
      integer          nga_pgroup_create
      integer          nga_pgroup_duplicate
      integer          nga_pgroup_self
      logical          nga_pgroup_destroy
      integer          nga_pgroup_get_default
      integer          nga_pgroup_get_mirror
      integer          nga_pgroup_get_world
      integer          nga_pgroup_nnodes
      integer          nga_pgroup_nodeid
      integer          nga_pgroup_split
      integer          nga_pgroup_split_irreg
      integer          nga_read_inc
      integer          nga_register_type
      real             nga_sdot
      real             nga_sdot_patch
      logical          nga_set_update4_info
      logical          nga_set_update5_info
      integer          nga_solve
      integer          nga_spd_invert
      integer          nga_total_blocks
      logical          nga_update2_ghosts
      logical          nga_update3_ghosts
      logical          nga_update4_ghosts
      logical          nga_update5_ghosts
      logical          nga_update6_ghosts
      logical          nga_update7_ghosts
      logical          nga_update_ghost_dir
      logical          nga_uses_ma
      logical          nga_uses_proc_grid
      logical          nga_valid_handle
      logical          nga_verify_handle
      double precision nga_wtime
      double complex   nga_zdot
      double complex   nga_zdot_patch
!
      external ga_allocate
      external ga_deallocate
      external ga_cdot
      external ga_cdot_patch
      external ga_cluster_nnodes
      external ga_cluster_nodeid
      external ga_cluster_nprocs
      external ga_cluster_procid
      external ga_cluster_proc_nodeid
      external ga_compare_distr
      external ga_create
      external ga_create_handle
      external ga_create_irreg
      external ga_create_mutexes
      external ga_ddot
      external ga_ddot_patch
      external ga_destroy
      external ga_destroy_mutexes
      external ga_duplicate
      external ga_get_debug
      external ga_get_dimension
      external ga_get_pgroup
      external ga_get_pgroup_size
      external ga_has_ghosts
      external ga_idot
      external ga_initialized
      external ga_inquire_memory
      external ga_is_mirrored
      external ga_llt_solve
      external ga_locate
      external ga_locate_region
      external ga_memory_avail
      external ga_memory_limited
      external ga_nbtest
      external ga_ndim
      external ga_nnodes
      external ga_nodeid
      external ga_overlay
      external ga_pgroup_absolute_id
      external ga_pgroup_create
      external ga_pgroup_duplicate
      external ga_pgroup_self
      external ga_pgroup_destroy
      external ga_pgroup_get_default
      external ga_pgroup_get_mirror
      external ga_pgroup_get_world
      external ga_pgroup_nnodes
      external ga_pgroup_nodeid
      external ga_pgroup_split
      external ga_pgroup_split_irreg
      external ga_read_inc
      external ga_sdot
      external ga_sdot_patch
      external ga_set_update4_info
      external ga_set_update5_info
      external ga_solve
      external ga_spd_invert
      external ga_total_blocks
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_uses_ma
      external ga_uses_proc_grid
      external ga_valid_handle
      external ga_verify_handle
      external ga_wtime
      external ga_zdot
      external ga_zdot_patch
      external nga_allocate
      external nga_deallocate
      external nga_cdot
      external nga_cdot_patch
      external nga_cluster_nnodes
      external nga_cluster_nodeid
      external nga_cluster_nprocs
      external nga_cluster_procid
      external nga_cluster_proc_nodeid
      external nga_compare_distr
      external nga_create
      external nga_create_config
      external nga_create_ghosts
      external nga_create_ghosts_config
      external nga_create_ghosts_irreg
      external nga_create_ghosts_irreg_config
      external nga_create_handle
      external nga_create_irreg
      external nga_create_irreg_config
      external nga_create_mutexes
      external nga_ddot
      external nga_ddot_patch
      external nga_deregister_type
      external nga_destroy
      external nga_destroy_mutexes
      external nga_duplicate
      external nga_get_debug
      external nga_get_dimension
      external nga_get_field
      external nga_get_pgroup
      external nga_get_pgroup_size
      external nga_has_ghosts
      external nga_idot
      external nga_idot_patch
      external nga_initialized
      external nga_inquire_memory
      external nga_is_mirrored
      external nga_llt_solve
      external nga_locate
      external nga_locate_num_blocks
      external nga_locate_region
      external nga_memory_avail
      external nga_memory_limited
      external nga_nbget_field
      external nga_nbput_field
      external nga_nbtest
      external nga_ndim
      external nga_nnodes
      external nga_nodeid
      external nga_overlay
      external nga_pgroup_absolute_id
      external nga_pgroup_create
      external nga_pgroup_duplicate
      external nga_pgroup_self
      external nga_pgroup_destroy
      external nga_pgroup_get_default
      external nga_pgroup_get_mirror
      external nga_pgroup_get_world
      external nga_pgroup_nnodes
      external nga_pgroup_nodeid
      external nga_pgroup_split
      external nga_pgroup_split_irreg
      external nga_put_field
      external nga_read_inc
      external nga_register_type
      external nga_sdot
      external nga_sdot_patch
      external nga_set_update4_info
      external nga_set_update5_info
      external nga_solve
      external nga_spd_invert
      external nga_total_blocks
      external nga_update2_ghosts
      external nga_update3_ghosts
      external nga_update4_ghosts
      external nga_update5_ghosts
      external nga_update6_ghosts
      external nga_update7_ghosts
      external nga_update_ghost_dir
      external nga_uses_ma
      external nga_uses_proc_grid
      external nga_valid_handle
      external nga_verify_handle
      external nga_wtime
      external nga_zdot
      external nga_zdot_patch
!
# 109 "./offl_ccsd_t_doubles_l.F"
# 109 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 25 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     constants
!
# 29 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex
# 38 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type
# 41 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))
# 50 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)
# 53 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     function types
!
# 58 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff
# 90 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff
# 123 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     variables
!
# 130 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     common blocks
# 137 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_byte/ byte_mb(2)
      character*1       byte_mb
# 145 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_int/  int_mb(2)
      integer           int_mb
# 150 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_log/  log_mb(2)
      logical           log_mb
# 158 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_real/ real_mb(2)
      real              real_mb
# 166 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dbl/  dbl_mb(2)
      double precision  dbl_mb
# 174 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_scpl/ scpl_mb(2)
      complex           scpl_mb
# 182 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dcpl/ dcpl_mb(2)
      double complex    dcpl_mb
# 110 "./offl_ccsd_t_doubles_l.F"
# 110 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/sym.fh"
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id$
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 111 "./offl_ccsd_t_doubles_l.F"
# 111 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/errquit.fh"
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id$
# 112 "./offl_ccsd_t_doubles_l.F"
# 112 "./offl_ccsd_t_doubles_l.F"
# 1 "../include/tce.fh"
c
c $Id$
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor
      integer ea_unused_spin,ea_unused_sym
      integer ip_unused_spin,ip_unused_sym
# 89 "../include/tce.fh"
      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e,
     6  ea_unused_spin,ea_unused_sym,
     7  ip_unused_spin,ip_unused_sym
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd
# 104 "../include/tce.fh"
      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 113 "./offl_ccsd_t_doubles_l.F"
# 113 "./offl_ccsd_t_doubles_l.F"
# 1 "./ccsd_t_ps.fh"
C$Id$
c
c     pstat handles for the TCE code
c
      integer ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
     
# 32 "./ccsd_t_ps.fh"
      logical otceps            ! True if gathering stats
      common /tceps/ otceps,
     $     ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
# 60 "./ccsd_t_ps.fh"
c
# 114 "./offl_ccsd_t_doubles_l.F"
# 114 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/printlevels.fh"
      integer print_none, print_low, print_medium, print_high, 
     $     print_debug, print_default, print_never
C$Id$
      parameter (print_none=0, print_low=10, print_medium=20,
     $     print_high=30, print_debug=100, print_never=1000000)
      parameter (print_default = print_medium)
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
c      
C$Id$
      logical util_print
      double precision util_cpusec
      double precision util_wallsec
      double precision util_random
      integer util_batch_job_time_remaining
      integer util_time_remaining
      logical util_test_time_remaining
      logical util_nwchemrc_get
      logical util_module_avail
      external util_print
      external util_cpusec
      external util_wallsec
      external util_random
      external util_batch_job_time_remaining
      external util_time_remaining
      external util_test_time_remaining
      external util_nwchemrc_get
      external util_module_avail
c
      logical util_xyz_seek
      external util_xyz_seek
      logical util_xyz_nframes
      external util_xyz_nframes
c
      logical util_get_io_unit
      external util_get_io_unit
c
      integer nw_max_path_len   ! Maximum path len -> posix standard is what?
      parameter (nw_max_path_len = 255)
c
# 115 "./offl_ccsd_t_doubles_l.F"
# 115 "./offl_ccsd_t_doubles_l.F"
# 1 "../include/offl.fh"
C$Id$
# 4 "../include/offl.fh"
CCC#define ASYNC 1
c k_a_sort t2sub
c k_b_sort v2sub
      integer	triplesx_mxlgth
# 116 "./offl_ccsd_t_doubles_l.F"
# 116 "./offl_ccsd_t_doubles_l.F"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p4b
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b,p7b
      integer p5b_2,p7b_1,h2b_1,p7b_2
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER p6b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b
      INTEGER k_b
c -- peta-exa --
      INTEGER a3(9,6)
      INTEGER ia6,ja6
c --------------
      DOUBLE PRECISION triplesx(*)
c --------------
      INTEGER k_range_h3b_1
      INTEGER k_range_h2b_1
      INTEGER k_range_h1b_1
      INTEGER k_range_p6b_1
      INTEGER k_range_p5b_1
      INTEGER k_range_p4b_1
      INTEGER k_range_h7b_1
      INTEGER k_range_p7b_1
      INTEGER k_a_srt_len
      INTEGER k_b_srt_len
C #ifdef OFFLOAD_CODE
      integer l_t2sub,l_triplesx,l_v2sub
C #endif
      double precision t2sub(*),v2sub(*),scratch(*)
      logical tce_hashnsort,lresult
      external tce_hashnsort
      logical tce_hashnsort_2
      external tce_hashnsort_2
      integer n_h7b
      integer n_p7b
      double precision t0
      integer deltat_mic,deltat_off
# 183 "./offl_ccsd_t_doubles_l.F"
      double precision omp_get_wtime
      external omp_get_wtime
# 186 "./offl_ccsd_t_doubles_l.F"
      integer h7b_in,p7b_in
# 188 "./offl_ccsd_t_doubles_l.F"
C #ifdef OFFLOAD_CODE
cfrom l_triplesx
      l_triplesx=
     c int_mb(k_range+t_h3b-1)*
     c int_mb(k_range+t_h2b-1)*
     c int_mb(k_range+t_h1b-1)*
     c int_mb(k_range+t_p6b-1)*
     c int_mb(k_range+t_p5b-1)*
     c int_mb(k_range+t_p4b-1)
      call ccsd_t_v2t2lgth(l_t2sub,l_v2sub)
C #endif
# 200 "./offl_ccsd_t_doubles_l.F"
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h1b
        a3(2,6)=t_h3b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h3b
        a3(3,5)=t_h1b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p6b
        a3(4,3)=t_p4b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p6b
        a3(5,3)=t_p4b
        a3(5,4)=t_h2b
        a3(5,5)=t_h1b
        a3(5,6)=t_h3b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p6b
        a3(6,3)=t_p4b
        a3(6,4)=t_h3b
        a3(6,5)=t_h1b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p4b
        a3(7,2)=t_p6b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p4b
        a3(8,2)=t_p6b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h1b
        a3(8,6)=t_h3b
c
        a3(9,1)=t_p4b
        a3(9,2)=t_p6b
        a3(9,3)=t_p5b
        a3(9,4)=t_h3b
        a3(9,5)=t_h1b
        a3(9,6)=t_h2b
c
# 264 "./offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") ':'
# 267 "./offl_ccsd_t_doubles_l.F"
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
      enddo
c
# 287 "./offl_ccsd_t_doubles_l.F"
      write (*,*) 'DIRECTIVES MAPPING scratch', l_t2sub*8, 'bytes'
!$omp target data map(alloc:scratch(1:l_t2sub))
# 294 "./offl_ccsd_t_doubles_l.F"
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p4b.le.p5b).and.(h2b.le.h3b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
# 312 "./offl_ccsd_t_doubles_l.F"
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
c
c
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
# 325 "./offl_ccsd_t_doubles_l.F"
c     prep. work
c     figure out  cycles to work on
      n_h7b=0
      DO h7b = 1,noab
         if(tce_hashnsort(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p5b,h1b,h7b,
     I        p6b,h2b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_h7b=n_h7b+1
         endif
      enddo
# 340 "./offl_ccsd_t_doubles_l.F"
      if(n_h7b.gt.0) then
# 345 "./offl_ccsd_t_doubles_l.F"
         do h7b_in=ga_nodeid()+1,ga_nodeid()+noab
            h7b=mod(h7b_in,noab)+1
# 348 "./offl_ccsd_t_doubles_l.F"
            if(tce_hashnsort(.false.,
     d           d_a, d_b,
     I           k_a_offset,k_b_offset,
     I           p4b,p5b,h1b,h7b,
     I           p6b,h2b,h3b,
     O           t2sub,v2sub)) then
            k_range_h7b_1 = int_mb(k_range+h7b-1)
# 356 "./offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") '+'
# 360 "./offl_ccsd_t_doubles_l.F"
      write (*,*) 'DIRECTIVES MAPPING t2', l_t2sub*8, 'bytes'
      write (*,*) 'DIRECTIVES MAPPING v2:', l_v2sub*8, 'bytes'
!$omp target data map(to:t2sub(1:l_t2sub)) map(to:v2sub(1:l_v2sub))
# 370 "./offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 376 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_1(k_range_h3b_1,k_range_h2b_1,
# 383 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     d     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl11,fdist_sdcomp11)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 397 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_2(k_range_h3b_1,k_range_h2b_1,
# 404 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl12,fdist_sdcomp12)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c      call tce_sdtime0(t0)
# 418 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_3(k_range_h3b_1,k_range_h2b_1,
# 425 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl13,fdist_sdcomp13)
       END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 439 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_4(k_range_h3b_1,k_range_h2b_1,
# 446 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl14,fdist_sdcomp14)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c      call tce_sdtime0(t0)
# 460 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_5(k_range_h3b_1,k_range_h2b_1,
# 467 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl15,fdist_sdcomp15)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 481 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_6(k_range_h3b_1,k_range_h2b_1,
# 488 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl16,fdist_sdcomp16)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 502 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_7(k_range_h3b_1,k_range_h2b_1,
# 509 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl17,fdist_sdcomp17)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 523 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_8(k_range_h3b_1,k_range_h2b_1,
# 530 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl18,fdist_sdcomp18)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 544 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_9(k_range_h3b_1,k_range_h2b_1,
# 551 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl19,fdist_sdcomp19)
      END IF
# 561 "./offl_ccsd_t_doubles_l.F"
c     unmap(to:t2sub(1:l_t2sub)) unmap(to:v2sub(1:l_v2sub))
!$omp end target data
# 568 "./offl_ccsd_t_doubles_l.F"
      endif
      END DO !h7b loop
      endif ! n_h7b.ne.0
c
c
      END IF
      END DO !ia6 loop
# 576 "./offl_ccsd_t_doubles_l.F"
cold      SUBROUTINE ccsd_t_doubles_l_2(d_a,k_a_offset,
c
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h3b
        a3(2,6)=t_h1b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h1b
        a3(3,5)=t_h3b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p4b
        a3(4,3)=t_p6b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p4b
        a3(5,3)=t_p6b
        a3(5,4)=t_h2b
        a3(5,5)=t_h3b
        a3(5,6)=t_h1b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p4b
        a3(6,3)=t_p6b
        a3(6,4)=t_h1b
        a3(6,5)=t_h3b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p6b
        a3(7,2)=t_p4b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p6b
        a3(8,2)=t_p4b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h3b
        a3(8,6)=t_h1b
c
        a3(9,1)=t_p6b
        a3(9,2)=t_p4b
        a3(9,3)=t_p5b
        a3(9,4)=t_h1b
        a3(9,5)=t_h3b
        a3(9,6)=t_h2b
c
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
        enddo
c
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p5b.le.p6b).and.(h1b.le.h2b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
c     prep. work
c     figure out  cycles to work on
      n_p7b=0
      DO p7b = noab+1,noab+nvab
         if(tce_hashnsort_2(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_p7b=n_p7b+1
         endif
      enddo
# 701 "./offl_ccsd_t_doubles_l.F"
      if(n_p7b.ne.0) then
# 706 "./offl_ccsd_t_doubles_l.F"
      do p7b_in= ga_nodeid()+1,nvab+ga_nodeid()
         p7b=mod(p7b_in,nvab)+noab+1
# 709 "./offl_ccsd_t_doubles_l.F"
         if(tce_hashnsort_2(.false.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub)) then
# 716 "./offl_ccsd_t_doubles_l.F"
            k_range_p7b_1 = int_mb(k_range+p7b-1)
# 718 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '='
# 722 "./offl_ccsd_t_doubles_l.F"
!$omp target data map(to:t2sub(1:l_t2sub)) map(to:v2sub(1:l_v2sub))
# 728 "./offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 734 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_1(k_range_h3b_1,k_range_h2b_1,
# 741 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl21,fdist_sdcomp21)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 755 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_2(k_range_h3b_1,k_range_h2b_1,
# 762 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl22,fdist_sdcomp22)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 776 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_3(k_range_h3b_1,k_range_h2b_1,
# 783 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl23,fdist_sdcomp23)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 797 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_4(k_range_h3b_1,k_range_h2b_1,
# 804 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl24,fdist_sdcomp24)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
# 816 "./offl_ccsd_t_doubles_l.F"
c        call tce_sdtime0(t0)
# 819 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_5(k_range_h3b_1,k_range_h2b_1,
# 826 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl25,fdist_sdcomp25)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 840 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_6(k_range_h3b_1,k_range_h2b_1,
# 847 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl26,fdist_sdcomp26)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 861 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_7(k_range_h3b_1,k_range_h2b_1,
# 868 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl27,fdist_sdcomp27)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 882 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_8(k_range_h3b_1,k_range_h2b_1,
# 889 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl28,fdist_sdcomp28)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 903 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_9(k_range_h3b_1,k_range_h2b_1,
# 910 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl29,fdist_sdcomp29)
      END IF
# 920 "./offl_ccsd_t_doubles_l.F"
c     unmap(to:t2sub(1:l_t2sub)) unmap(to:v2sub(1:l_v2sub))
!$omp end target data
# 927 "./offl_ccsd_t_doubles_l.F"
      endif
      END DO ! p7b loop
# 930 "./offl_ccsd_t_doubles_l.F"
      endif ! n_p7b.ne.0
c
c
      END IF
      END DO ! ia6 loop
# 939 "./offl_ccsd_t_doubles_l.F"
c     unmap(to:scratch(1:l_t2sub))
!$omp end target data
# 950 "./offl_ccsd_t_doubles_l.F"
      RETURN
      END
# 954 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 958 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 968 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 976 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 977 "./offl_ccsd_t_doubles_l.F"
# 979 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '1'
# 981 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 987 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
cz!DEC$ unroll_and_jam (2)
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h3d*h2d
       triplesx(h2h3,h1,p6,p5,p4)=triplesx(h2h3,h1,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1005 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1010 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1011 "./offl_ccsd_t_doubles_l.F"
# 1011 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1015 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1019 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1029 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision v2sub(*)
# 1037 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1041 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1042 "./offl_ccsd_t_doubles_l.F"
# 1042 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1044 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1048 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1052 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '2'
# 1054 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1060 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1080 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1085 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1086 "./offl_ccsd_t_doubles_l.F"
# 1086 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1090 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1094 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1104 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1106 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p6d,p5d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
c      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1115 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1119 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1120 "./offl_ccsd_t_doubles_l.F"
# 1120 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1122 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1126 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1130 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '3'
# 1132 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1138 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p6,p5,p4)=triplesx(h1,h3h2,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1157 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1162 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1163 "./offl_ccsd_t_doubles_l.F"
# 1163 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1167 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1171 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1181 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1183 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1190 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1191 "./offl_ccsd_t_doubles_l.F"
# 1193 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '4'
# 1195 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1201 "./offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p4,p6)=triplesx(h2h3,h1,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1217 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1222 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1223 "./offl_ccsd_t_doubles_l.F"
# 1223 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1227 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1231 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     d     deltat)
# 1241 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1243 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1250 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1254 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1255 "./offl_ccsd_t_doubles_l.F"
# 1255 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1257 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1261 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1265 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '5'
# 1267 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3,h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1273 "./offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p4,p6)=triplesx(h3,h1,h2,p5,p4,p6)
     1    + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1295 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1300 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1301 "./offl_ccsd_t_doubles_l.F"
# 1301 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1305 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1309 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1319 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1321 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h1d,h3d*h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1329 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1333 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1334 "./offl_ccsd_t_doubles_l.F"
# 1334 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1336 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1340 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1344 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '6'
# 1346 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1352 "./offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h2h3=1,h2d*h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h2h3,p5,p4,p6)=triplesx(h1,h2h3,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h2h3,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1370 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1375 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1376 "./offl_ccsd_t_doubles_l.F"
# 1376 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1380 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 1384 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1394 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1396 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1403 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1404 "./offl_ccsd_t_doubles_l.F"
# 1406 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '7'
# 1408 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1414 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p6,p4)=triplesx(h2h3,h1,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1430 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1435 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1436 "./offl_ccsd_t_doubles_l.F"
# 1436 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1440 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 1444 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1454 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
      double precision scratch(h7d,h3d,h2d,p6d)
# 1462 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1466 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1467 "./offl_ccsd_t_doubles_l.F"
# 1467 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1469 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1473 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1477 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '8'
# 1479 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1485 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p6,p4)=triplesx(h3,h1,h2,p5,p6,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1506 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1511 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1512 "./offl_ccsd_t_doubles_l.F"
# 1512 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1516 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 1520 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1530 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1532 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p5d,p6d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1540 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1544 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1545 "./offl_ccsd_t_doubles_l.F"
# 1545 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1547 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1551 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1555 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '9'
# 1557 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1563 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p5,p6,p4)=triplesx(h1,h3h2,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1581 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1586 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1587 "./offl_ccsd_t_doubles_l.F"
# 1587 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1591 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 1595 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1605 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1607 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1613 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1617 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1618 "./offl_ccsd_t_doubles_l.F"
# 1619 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1623 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1627 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'a'
# 1629 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1635 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1655 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1660 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1661 "./offl_ccsd_t_doubles_l.F"
# 1661 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1665 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1669 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1679 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1681 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p5d,p4d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1688 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2
# 1692 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1693 "./offl_ccsd_t_doubles_l.F"
# 1693 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1695 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2(
# 1699 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1703 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'b'
# 1705 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1711 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p5,p4)=triplesx(h2h1,h3,p6,p5,p4)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1728 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1733 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1734 "./offl_ccsd_t_doubles_l.F"
# 1734 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1738 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1742 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1752 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1754 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d)
# 1761 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1765 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1766 "./offl_ccsd_t_doubles_l.F"
# 1766 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1768 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1772 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 1776 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'c'
# 1778 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 1784 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p5,p4)=triplesx(h2,h3,h1,p6,p5,p4) +
     C        scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1804 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1809 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1810 "./offl_ccsd_t_doubles_l.F"
# 1810 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1814 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1818 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1828 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1830 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p4d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1836 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1840 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1841 "./offl_ccsd_t_doubles_l.F"
# 1841 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1843 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1847 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1851 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'd'
# 1853 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1859 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p4,p5)=triplesx(h3,h2,h1,p6,p4,p5)
     1   + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1880 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1885 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1886 "./offl_ccsd_t_doubles_l.F"
# 1886 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1890 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1894 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1904 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1906 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p4d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1913 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2
# 1917 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1918 "./offl_ccsd_t_doubles_l.F"
# 1918 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1920 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2(
# 1924 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1928 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'e'
# 1930 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1936 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p4,p5)=triplesx(h2h1,h3,p6,p4,p5)
     1   + scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1954 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1959 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1960 "./offl_ccsd_t_doubles_l.F"
# 1960 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1964 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1968 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1978 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1980 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1987 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1991 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1992 "./offl_ccsd_t_doubles_l.F"
# 1993 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1997 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2001 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'f'
# 2003 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 2009 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p4,p5)=triplesx(h2,h3,h1,p6,p4,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2028 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2033 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2034 "./offl_ccsd_t_doubles_l.F"
# 2034 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2038 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 2042 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2052 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2054 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2061 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 2065 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2066 "./offl_ccsd_t_doubles_l.F"
# 2066 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2068 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 2072 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2076 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'g'
# 2078 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 2084 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p4,p6,p5)=triplesx(h3,h2,h1,p4,p6,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2104 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2109 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2110 "./offl_ccsd_t_doubles_l.F"
# 2110 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2114 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 2118 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2128 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2130 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p4d,p6d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2137 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2
# 2141 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2142 "./offl_ccsd_t_doubles_l.F"
# 2143 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2(
# 2147 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 2151 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'h'
# 2153 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h2h1)
!$omp&collapse(3) schedule(static,1) 
# 2159 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p4,p6,p5)=triplesx(h2h1,h3,p4,p6,p5)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2177 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2182 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2183 "./offl_ccsd_t_doubles_l.F"
# 2183 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2187 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 2191 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2201 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2203 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2210 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 2214 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2215 "./offl_ccsd_t_doubles_l.F"
# 2215 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2217 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 2221 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2225 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'i'
# 2227 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 2233 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p4,p6,p5)=triplesx(h2,h3,h1,p4,p6,p5)
     1    + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2253 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2258 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2259 "./offl_ccsd_t_doubles_l.F"
# 2259 "./offl_ccsd_t_doubles_l.F"
      return
      end
# 2269 "offl_ccsd_t_doubles_l.F"
# 2269 "offl_ccsd_t_doubles_l.F"
# 1 "./offl_ccsd_t_doubles_l_notransp.F"
# 25 "./offl_ccsd_t_doubles_l_notransp.F"
      subroutine offl_ccsd_t_d1_1(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 31 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 38 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 39 "./offl_ccsd_t_doubles_l_notransp.F"
# 41 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '1'
# 43 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 49 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 66 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 71 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 72 "./offl_ccsd_t_doubles_l_notransp.F"
# 72 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_2(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 81 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 88 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 89 "./offl_ccsd_t_doubles_l_notransp.F"
# 91 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '2'
# 93 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 99 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 116 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 121 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 122 "./offl_ccsd_t_doubles_l_notransp.F"
# 122 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_3(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 131 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 139 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 140 "./offl_ccsd_t_doubles_l_notransp.F"
# 142 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '3'
# 144 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 150 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h3=1,h3d
      do h1=1,h1d
      do h7=1,h7d
       triplesx(h1,h3,h2,p6,p5,p4)=triplesx(h1,h3,h2,p6,p5,p4)
     1  -t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 167 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 172 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 173 "./offl_ccsd_t_doubles_l_notransp.F"
# 173 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_4(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 182 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h2d,h1d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 189 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 190 "./offl_ccsd_t_doubles_l_notransp.F"
# 192 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '4'
# 194 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 200 "./offl_ccsd_t_doubles_l_notransp.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h2,h1,p5,p4,p6)=triplesx(h3,h2,h1,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 217 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 222 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 223 "./offl_ccsd_t_doubles_l_notransp.F"
# 223 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_5(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     d     deltat)
# 232 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 239 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 240 "./offl_ccsd_t_doubles_l_notransp.F"
# 242 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '5'
# 244 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3,h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 250 "./offl_ccsd_t_doubles_l_notransp.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h2=1,h2d
      do h1=1,h1d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p4,p6)=triplesx(h3,h1,h2,p5,p4,p6)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 267 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 272 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 273 "./offl_ccsd_t_doubles_l_notransp.F"
# 273 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_6(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 282 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h1d,h3d,h2d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 289 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 290 "./offl_ccsd_t_doubles_l_notransp.F"
# 292 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '6'
# 294 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 300 "./offl_ccsd_t_doubles_l_notransp.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h2=1,h2d
      do h3=1,h3d
      do h1=1,h1d
      do h7=1,h7d
       triplesx(h1,h3,h2,p5,p4,p6)=triplesx(h1,h3,h2,p5,p4,p6)
     1  -t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 317 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 322 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 323 "./offl_ccsd_t_doubles_l_notransp.F"
# 323 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_7(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 332 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h2d,h1d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 339 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 340 "./offl_ccsd_t_doubles_l_notransp.F"
# 342 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '7'
# 344 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 350 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h2,h1,p5,p6,p4)=triplesx(h3,h2,h1,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 367 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 372 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 373 "./offl_ccsd_t_doubles_l_notransp.F"
# 373 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_8(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 382 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 389 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 390 "./offl_ccsd_t_doubles_l_notransp.F"
# 390 "./offl_ccsd_t_doubles_l_notransp.F"
CDIR$ NOINLINE
# 393 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '8'
# 395 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 401 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
      do h1=1,h1d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p6,p4)=triplesx(h3,h1,h2,p5,p6,p4)
     1  -t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 418 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 423 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 424 "./offl_ccsd_t_doubles_l_notransp.F"
# 424 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_9(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 433 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h1d,h3d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 440 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 441 "./offl_ccsd_t_doubles_l_notransp.F"
# 443 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '9'
# 445 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3,h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 451 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
      do h3=1,h3d
      do h1=1,h1d
      do h7=1,h7d
       triplesx(h1,h3,h2,p5,p6,p4)=triplesx(h1,h3,h2,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 468 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 473 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 474 "./offl_ccsd_t_doubles_l_notransp.F"
# 474 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_1(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 483 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 490 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 491 "./offl_ccsd_t_doubles_l_notransp.F"
# 493 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'a'
# 495 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 501 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1  -t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 518 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 523 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 524 "./offl_ccsd_t_doubles_l_notransp.F"
# 524 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_2(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 533 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h1d,h3d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 540 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 541 "./offl_ccsd_t_doubles_l_notransp.F"
# 543 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'b'
# 545 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 551 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h1,h3,p6,p5,p4)=triplesx(h2,h1,h3,p6,p5,p4)
     1  -t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 568 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 573 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 574 "./offl_ccsd_t_doubles_l_notransp.F"
# 574 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_3(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 583 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 590 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 591 "./offl_ccsd_t_doubles_l_notransp.F"
# 593 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'c'
# 595 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 601 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p5,p4)=triplesx(h2,h3,h1,p6,p5,p4)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 618 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 623 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 624 "./offl_ccsd_t_doubles_l_notransp.F"
# 624 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_4(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 633 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 640 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 641 "./offl_ccsd_t_doubles_l_notransp.F"
# 643 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'd'
# 645 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 651 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p4,p5)=triplesx(h3,h2,h1,p6,p4,p5)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 668 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 673 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 674 "./offl_ccsd_t_doubles_l_notransp.F"
# 674 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_5(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 683 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h1d,h3d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 690 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 691 "./offl_ccsd_t_doubles_l_notransp.F"
# 693 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'e'
# 695 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 701 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h1,h3,p6,p4,p5)=triplesx(h2,h1,h3,p6,p4,p5)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 718 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 723 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 724 "./offl_ccsd_t_doubles_l_notransp.F"
# 724 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_6(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 733 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 740 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 741 "./offl_ccsd_t_doubles_l_notransp.F"
# 743 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'f'
# 745 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 751 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p4,p5)=triplesx(h2,h3,h1,p6,p4,p5)
     1    - t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 768 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 773 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 774 "./offl_ccsd_t_doubles_l_notransp.F"
# 774 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_7(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 783 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 790 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 791 "./offl_ccsd_t_doubles_l_notransp.F"
# 793 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'g'
# 795 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 801 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do p7=1,p7d
       triplesx(h3,h2,h1,p4,p6,p5)=triplesx(h3,h2,h1,p4,p6,p5)
     1    - t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 818 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 823 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 824 "./offl_ccsd_t_doubles_l_notransp.F"
# 824 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_8(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 833 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h1d,h3d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 840 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 841 "./offl_ccsd_t_doubles_l_notransp.F"
# 843 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'h'
# 845 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 851 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h3=1,h3d
      do h1=1,h1d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h1,h3,p4,p6,p5)=triplesx(h2,h1,h3,p4,p6,p5)
     1   - t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 868 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 873 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 874 "./offl_ccsd_t_doubles_l_notransp.F"
# 874 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_9(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 883 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 890 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 891 "./offl_ccsd_t_doubles_l_notransp.F"
# 893 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'i'
# 895 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 901 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h3,h1,p4,p6,p5)=triplesx(h2,h3,h1,p4,p6,p5)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 918 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 923 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 924 "./offl_ccsd_t_doubles_l_notransp.F"
# 924 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
# 2270 "offl_ccsd_t_doubles_l.F"
# 1 "offl_ccsd_t_doubles_l.F"
C$Id$
# 3 "offl_ccsd_t_doubles_l.F"
c     Modifications (c) 2021 Advanced Micro Devices, Inc. All Rights Reserved.
# 19 "offl_ccsd_t_doubles_l.F"
C #ifndef DEBUG_TRIPLESX
C #define DEBUG_TRIPLESX 1
C #endif
# 96 "offl_ccsd_t_doubles_l.F"
      SUBROUTINE ccsd_t_doubles_l_12(d_a,k_a_offset,
# 98 "offl_ccsd_t_doubles_l.F"
     &d_b,k_b_offset,triplesx,t_p4
     &b,t_p5b,t_p6b,t_h1b,t_h2b,t_h3b,
     T     v2sub,t2sub,scratch)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = -1 * P( 9 ) * Sum ( h7 ) * t ( p4 p5 h1 h7 )_t * v ( h7 p6 h2 h3 )_v
c
c elimination of the transpositions (kowalski,august,2009)
c
      IMPLICIT NONE
# 108 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 4 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/macommon.h"
# 22 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/macommon.h"
                     
# 5 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      logical          ga_allocate
      logical          ga_deallocate
      complex          ga_cdot
      complex          ga_cdot_patch
      integer          ga_cluster_nnodes
      integer          ga_cluster_nodeid
      integer          ga_cluster_nprocs
      integer          ga_cluster_procid
      integer          ga_cluster_proc_nodeid
      logical          ga_compare_distr
      logical          ga_create
      integer          ga_create_handle
      logical          ga_create_irreg
      logical          ga_create_mutexes
      double precision ga_ddot
      double precision ga_ddot_patch
      logical          ga_destroy
      logical          ga_destroy_mutexes
      logical          ga_duplicate
      logical          ga_get_debug
      integer          ga_get_dimension
      integer          ga_get_pgroup
      integer          ga_get_pgroup_size
      logical          ga_has_ghosts
      integer          ga_idot
      logical          ga_initialized
      integer          ga_inquire_memory
      integer          ga_is_mirrored
      integer          ga_llt_solve
      logical          ga_locate
      logical          ga_locate_region
      integer          ga_memory_avail
      logical          ga_memory_limited
      integer          ga_nbtest
      integer          ga_ndim
      integer          ga_nnodes
      integer          ga_nodeid
      logical          ga_overlay
      integer          ga_pgroup_absolute_id
      integer          ga_pgroup_create
      integer          ga_pgroup_duplicate
      integer          ga_pgroup_self
      logical          ga_pgroup_destroy
      integer          ga_pgroup_get_default
      integer          ga_pgroup_get_mirror
      integer          ga_pgroup_get_world
      integer          ga_pgroup_nnodes
      integer          ga_pgroup_nodeid
      integer          ga_pgroup_split
      integer          ga_pgroup_split_irreg
      integer          ga_read_inc
      real             ga_sdot
      real             ga_sdot_patch
      logical          ga_set_update4_info
      logical          ga_set_update5_info
      integer          ga_solve
      integer          ga_spd_invert
      integer          ga_total_blocks
      logical          ga_update2_ghosts
      logical          ga_update3_ghosts
      logical          ga_update4_ghosts
      logical          ga_update5_ghosts
      logical          ga_update6_ghosts
      logical          ga_update7_ghosts
      logical          ga_uses_ma
      logical          ga_uses_proc_grid
      logical          ga_valid_handle
      logical          ga_verify_handle
      double precision ga_wtime
      double complex   ga_zdot
      double complex   ga_zdot_patch
      logical          nga_allocate
      logical          nga_deallocate
      complex          nga_cdot
      complex          nga_cdot_patch
      integer          nga_cluster_nnodes
      integer          nga_cluster_nodeid
      integer          nga_cluster_nprocs
      integer          nga_cluster_procid
      integer          nga_cluster_proc_nodeid
      logical          nga_compare_distr
      logical          nga_create
      logical          nga_create_config
      logical          nga_create_ghosts
      logical          nga_create_ghosts_config
      logical          nga_create_ghosts_irreg
      logical          nga_create_ghosts_irreg_config
      integer          nga_create_handle
      logical          nga_create_irreg
      logical          nga_create_irreg_config
      logical          nga_create_mutexes
      double precision nga_ddot
      double precision nga_ddot_patch
      integer          nga_deregister_type
      logical          nga_destroy
      logical          nga_destroy_mutexes
      logical          nga_duplicate
      logical          nga_get_debug
      integer          nga_get_dimension
      integer          nga_get_pgroup
      integer          nga_get_pgroup_size
      logical          nga_has_ghosts
      integer          nga_idot
      integer          nga_idot_patch
      logical          nga_initialized
      integer          nga_inquire_memory
      integer          nga_is_mirrored
      integer          nga_llt_solve
      logical          nga_locate
      integer          nga_locate_num_blocks
      logical          nga_locate_region
      integer          nga_memory_avail
      logical          nga_memory_limited
      integer          nga_nbtest
      integer          nga_ndim
      integer          nga_nnodes
      integer          nga_nodeid
      logical          nga_overlay
      integer          nga_pgroup_absolute_id
      integer          nga_pgroup_create
      integer          nga_pgroup_duplicate
      integer          nga_pgroup_self
      logical          nga_pgroup_destroy
      integer          nga_pgroup_get_default
      integer          nga_pgroup_get_mirror
      integer          nga_pgroup_get_world
      integer          nga_pgroup_nnodes
      integer          nga_pgroup_nodeid
      integer          nga_pgroup_split
      integer          nga_pgroup_split_irreg
      integer          nga_read_inc
      integer          nga_register_type
      real             nga_sdot
      real             nga_sdot_patch
      logical          nga_set_update4_info
      logical          nga_set_update5_info
      integer          nga_solve
      integer          nga_spd_invert
      integer          nga_total_blocks
      logical          nga_update2_ghosts
      logical          nga_update3_ghosts
      logical          nga_update4_ghosts
      logical          nga_update5_ghosts
      logical          nga_update6_ghosts
      logical          nga_update7_ghosts
      logical          nga_update_ghost_dir
      logical          nga_uses_ma
      logical          nga_uses_proc_grid
      logical          nga_valid_handle
      logical          nga_verify_handle
      double precision nga_wtime
      double complex   nga_zdot
      double complex   nga_zdot_patch
!
      external ga_allocate
      external ga_deallocate
      external ga_cdot
      external ga_cdot_patch
      external ga_cluster_nnodes
      external ga_cluster_nodeid
      external ga_cluster_nprocs
      external ga_cluster_procid
      external ga_cluster_proc_nodeid
      external ga_compare_distr
      external ga_create
      external ga_create_handle
      external ga_create_irreg
      external ga_create_mutexes
      external ga_ddot
      external ga_ddot_patch
      external ga_destroy
      external ga_destroy_mutexes
      external ga_duplicate
      external ga_get_debug
      external ga_get_dimension
      external ga_get_pgroup
      external ga_get_pgroup_size
      external ga_has_ghosts
      external ga_idot
      external ga_initialized
      external ga_inquire_memory
      external ga_is_mirrored
      external ga_llt_solve
      external ga_locate
      external ga_locate_region
      external ga_memory_avail
      external ga_memory_limited
      external ga_nbtest
      external ga_ndim
      external ga_nnodes
      external ga_nodeid
      external ga_overlay
      external ga_pgroup_absolute_id
      external ga_pgroup_create
      external ga_pgroup_duplicate
      external ga_pgroup_self
      external ga_pgroup_destroy
      external ga_pgroup_get_default
      external ga_pgroup_get_mirror
      external ga_pgroup_get_world
      external ga_pgroup_nnodes
      external ga_pgroup_nodeid
      external ga_pgroup_split
      external ga_pgroup_split_irreg
      external ga_read_inc
      external ga_sdot
      external ga_sdot_patch
      external ga_set_update4_info
      external ga_set_update5_info
      external ga_solve
      external ga_spd_invert
      external ga_total_blocks
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_uses_ma
      external ga_uses_proc_grid
      external ga_valid_handle
      external ga_verify_handle
      external ga_wtime
      external ga_zdot
      external ga_zdot_patch
      external nga_allocate
      external nga_deallocate
      external nga_cdot
      external nga_cdot_patch
      external nga_cluster_nnodes
      external nga_cluster_nodeid
      external nga_cluster_nprocs
      external nga_cluster_procid
      external nga_cluster_proc_nodeid
      external nga_compare_distr
      external nga_create
      external nga_create_config
      external nga_create_ghosts
      external nga_create_ghosts_config
      external nga_create_ghosts_irreg
      external nga_create_ghosts_irreg_config
      external nga_create_handle
      external nga_create_irreg
      external nga_create_irreg_config
      external nga_create_mutexes
      external nga_ddot
      external nga_ddot_patch
      external nga_deregister_type
      external nga_destroy
      external nga_destroy_mutexes
      external nga_duplicate
      external nga_get_debug
      external nga_get_dimension
      external nga_get_field
      external nga_get_pgroup
      external nga_get_pgroup_size
      external nga_has_ghosts
      external nga_idot
      external nga_idot_patch
      external nga_initialized
      external nga_inquire_memory
      external nga_is_mirrored
      external nga_llt_solve
      external nga_locate
      external nga_locate_num_blocks
      external nga_locate_region
      external nga_memory_avail
      external nga_memory_limited
      external nga_nbget_field
      external nga_nbput_field
      external nga_nbtest
      external nga_ndim
      external nga_nnodes
      external nga_nodeid
      external nga_overlay
      external nga_pgroup_absolute_id
      external nga_pgroup_create
      external nga_pgroup_duplicate
      external nga_pgroup_self
      external nga_pgroup_destroy
      external nga_pgroup_get_default
      external nga_pgroup_get_mirror
      external nga_pgroup_get_world
      external nga_pgroup_nnodes
      external nga_pgroup_nodeid
      external nga_pgroup_split
      external nga_pgroup_split_irreg
      external nga_put_field
      external nga_read_inc
      external nga_register_type
      external nga_sdot
      external nga_sdot_patch
      external nga_set_update4_info
      external nga_set_update5_info
      external nga_solve
      external nga_spd_invert
      external nga_total_blocks
      external nga_update2_ghosts
      external nga_update3_ghosts
      external nga_update4_ghosts
      external nga_update5_ghosts
      external nga_update6_ghosts
      external nga_update7_ghosts
      external nga_update_ghost_dir
      external nga_uses_ma
      external nga_uses_proc_grid
      external nga_valid_handle
      external nga_verify_handle
      external nga_wtime
      external nga_zdot
      external nga_zdot_patch
!
# 109 "offl_ccsd_t_doubles_l.F"
# 109 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 4 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     $Id: mafdecls.fh,v 1.11 2002-09-14 05:40:30 d3g001 Exp $
!
# 8 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     Public header file for a portable dynamic memory allocator.
!
!     This file may be included by internal and external FORTRAN files.
!
# 14 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/macommon.h"
# 15 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 16 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     The guard ends here instead of at the end of the file because we only
!     need the cpp constants (stuff above) defined once per FORTRAN file,
!     but need the declarations (stuff below) to be defined each time this
!     file is included in a FORTRAN file.
!
# 25 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     constants
!
# 29 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex
# 38 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type
# 41 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))
# 50 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)
# 53 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     function types
!
# 58 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff
# 90 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff
# 123 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     variables
!
# 130 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     common blocks
# 137 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_byte/ byte_mb(2)
      character*1       byte_mb
# 145 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_int/  int_mb(2)
      integer           int_mb
# 150 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_log/  log_mb(2)
      logical           log_mb
# 158 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_real/ real_mb(2)
      real              real_mb
# 166 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dbl/  dbl_mb(2)
      double precision  dbl_mb
# 174 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_scpl/ scpl_mb(2)
      complex           scpl_mb
# 182 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dcpl/ dcpl_mb(2)
      double complex    dcpl_mb
# 110 "offl_ccsd_t_doubles_l.F"
# 110 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/sym.fh"
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id$
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 111 "offl_ccsd_t_doubles_l.F"
# 111 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/errquit.fh"
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id$
# 112 "offl_ccsd_t_doubles_l.F"
# 112 "offl_ccsd_t_doubles_l.F"
# 1 "../include/tce.fh"
c
c $Id$
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor
      integer ea_unused_spin,ea_unused_sym
      integer ip_unused_spin,ip_unused_sym
# 89 "../include/tce.fh"
      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e,
     6  ea_unused_spin,ea_unused_sym,
     7  ip_unused_spin,ip_unused_sym
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd
# 104 "../include/tce.fh"
      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 113 "offl_ccsd_t_doubles_l.F"
# 113 "offl_ccsd_t_doubles_l.F"
# 1 "./ccsd_t_ps.fh"
C$Id$
c
c     pstat handles for the TCE code
c
      integer ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
     
# 32 "./ccsd_t_ps.fh"
      logical otceps            ! True if gathering stats
      common /tceps/ otceps,
     $     ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
# 60 "./ccsd_t_ps.fh"
c
# 114 "offl_ccsd_t_doubles_l.F"
# 114 "offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/printlevels.fh"
      integer print_none, print_low, print_medium, print_high, 
     $     print_debug, print_default, print_never
C$Id$
      parameter (print_none=0, print_low=10, print_medium=20,
     $     print_high=30, print_debug=100, print_never=1000000)
      parameter (print_default = print_medium)
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
c      
C$Id$
      logical util_print
      double precision util_cpusec
      double precision util_wallsec
      double precision util_random
      integer util_batch_job_time_remaining
      integer util_time_remaining
      logical util_test_time_remaining
      logical util_nwchemrc_get
      logical util_module_avail
      external util_print
      external util_cpusec
      external util_wallsec
      external util_random
      external util_batch_job_time_remaining
      external util_time_remaining
      external util_test_time_remaining
      external util_nwchemrc_get
      external util_module_avail
c
      logical util_xyz_seek
      external util_xyz_seek
      logical util_xyz_nframes
      external util_xyz_nframes
c
      logical util_get_io_unit
      external util_get_io_unit
c
      integer nw_max_path_len   ! Maximum path len -> posix standard is what?
      parameter (nw_max_path_len = 255)
c
# 115 "offl_ccsd_t_doubles_l.F"
# 115 "offl_ccsd_t_doubles_l.F"
# 1 "../include/offl.fh"
C$Id$
# 4 "../include/offl.fh"
CCC#define ASYNC 1
c k_a_sort t2sub
c k_b_sort v2sub
      integer	triplesx_mxlgth
# 116 "offl_ccsd_t_doubles_l.F"
# 116 "offl_ccsd_t_doubles_l.F"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p4b
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b,p7b
      integer p5b_2,p7b_1,h2b_1,p7b_2
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER p6b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b
      INTEGER k_b
c -- peta-exa --
      INTEGER a3(9,6)
      INTEGER ia6,ja6
c --------------
      DOUBLE PRECISION triplesx(*)
c --------------
      INTEGER k_range_h3b_1
      INTEGER k_range_h2b_1
      INTEGER k_range_h1b_1
      INTEGER k_range_p6b_1
      INTEGER k_range_p5b_1
      INTEGER k_range_p4b_1
      INTEGER k_range_h7b_1
      INTEGER k_range_p7b_1
      INTEGER k_a_srt_len
      INTEGER k_b_srt_len
C #ifdef OFFLOAD_CODE
      integer l_t2sub,l_triplesx,l_v2sub
C #endif
      double precision t2sub(*),v2sub(*),scratch(*)
      logical tce_hashnsort,lresult
      external tce_hashnsort
      logical tce_hashnsort_2
      external tce_hashnsort_2
      integer n_h7b
      integer n_p7b
      double precision t0
      integer deltat_mic,deltat_off
# 183 "offl_ccsd_t_doubles_l.F"
      double precision omp_get_wtime
      external omp_get_wtime
# 186 "offl_ccsd_t_doubles_l.F"
      integer h7b_in,p7b_in
# 188 "offl_ccsd_t_doubles_l.F"
C #ifdef OFFLOAD_CODE
cfrom l_triplesx
      l_triplesx=
     c int_mb(k_range+t_h3b-1)*
     c int_mb(k_range+t_h2b-1)*
     c int_mb(k_range+t_h1b-1)*
     c int_mb(k_range+t_p6b-1)*
     c int_mb(k_range+t_p5b-1)*
     c int_mb(k_range+t_p4b-1)
      call ccsd_t_v2t2lgth(l_t2sub,l_v2sub)
C #endif
# 200 "offl_ccsd_t_doubles_l.F"
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h1b
        a3(2,6)=t_h3b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h3b
        a3(3,5)=t_h1b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p6b
        a3(4,3)=t_p4b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p6b
        a3(5,3)=t_p4b
        a3(5,4)=t_h2b
        a3(5,5)=t_h1b
        a3(5,6)=t_h3b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p6b
        a3(6,3)=t_p4b
        a3(6,4)=t_h3b
        a3(6,5)=t_h1b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p4b
        a3(7,2)=t_p6b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p4b
        a3(8,2)=t_p6b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h1b
        a3(8,6)=t_h3b
c
        a3(9,1)=t_p4b
        a3(9,2)=t_p6b
        a3(9,3)=t_p5b
        a3(9,4)=t_h3b
        a3(9,5)=t_h1b
        a3(9,6)=t_h2b
c
# 264 "offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") ':'
# 267 "offl_ccsd_t_doubles_l.F"
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
      enddo
c
# 294 "offl_ccsd_t_doubles_l.F"
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p4b.le.p5b).and.(h2b.le.h3b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
# 312 "offl_ccsd_t_doubles_l.F"
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
c
c
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
# 325 "offl_ccsd_t_doubles_l.F"
c     prep. work
c     figure out  cycles to work on
      n_h7b=0
      DO h7b = 1,noab
         if(tce_hashnsort(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p5b,h1b,h7b,
     I        p6b,h2b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_h7b=n_h7b+1
         endif
      enddo
# 340 "offl_ccsd_t_doubles_l.F"
      if(n_h7b.gt.0) then
# 345 "offl_ccsd_t_doubles_l.F"
         do h7b_in=ga_nodeid()+1,ga_nodeid()+noab
            h7b=mod(h7b_in,noab)+1
# 348 "offl_ccsd_t_doubles_l.F"
            if(tce_hashnsort(.false.,
     d           d_a, d_b,
     I           k_a_offset,k_b_offset,
     I           p4b,p5b,h1b,h7b,
     I           p6b,h2b,h3b,
     O           t2sub,v2sub)) then
            k_range_h7b_1 = int_mb(k_range+h7b-1)
# 356 "offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") '+'
# 370 "offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 381 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_1(k_range_h3b_1,k_range_h2b_1,
# 383 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     d     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl11,fdist_sdcomp11)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 402 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_2(k_range_h3b_1,k_range_h2b_1,
# 404 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl12,fdist_sdcomp12)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c      call tce_sdtime0(t0)
# 423 "offl_ccsd_t_doubles_l.F"
      call sdtransp_t_d1_3(k_range_h3b_1,k_range_h2b_1,
# 425 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl13,fdist_sdcomp13)
       END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 444 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_4(k_range_h3b_1,k_range_h2b_1,
# 446 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl14,fdist_sdcomp14)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c      call tce_sdtime0(t0)
# 465 "offl_ccsd_t_doubles_l.F"
      call sdtransp_t_d1_5(k_range_h3b_1,k_range_h2b_1,
# 467 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl15,fdist_sdcomp15)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 486 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_6(k_range_h3b_1,k_range_h2b_1,
# 488 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl16,fdist_sdcomp16)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 507 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_7(k_range_h3b_1,k_range_h2b_1,
# 509 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl17,fdist_sdcomp17)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 528 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_8(k_range_h3b_1,k_range_h2b_1,
# 530 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl18,fdist_sdcomp18)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 549 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d1_9(k_range_h3b_1,k_range_h2b_1,
# 551 "offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl19,fdist_sdcomp19)
      END IF
# 568 "offl_ccsd_t_doubles_l.F"
      endif
      END DO !h7b loop
      endif ! n_h7b.ne.0
c
c
      END IF
      END DO !ia6 loop
# 576 "offl_ccsd_t_doubles_l.F"
cold      SUBROUTINE ccsd_t_doubles_l_2(d_a,k_a_offset,
c
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h3b
        a3(2,6)=t_h1b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h1b
        a3(3,5)=t_h3b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p4b
        a3(4,3)=t_p6b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p4b
        a3(5,3)=t_p6b
        a3(5,4)=t_h2b
        a3(5,5)=t_h3b
        a3(5,6)=t_h1b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p4b
        a3(6,3)=t_p6b
        a3(6,4)=t_h1b
        a3(6,5)=t_h3b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p6b
        a3(7,2)=t_p4b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p6b
        a3(8,2)=t_p4b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h3b
        a3(8,6)=t_h1b
c
        a3(9,1)=t_p6b
        a3(9,2)=t_p4b
        a3(9,3)=t_p5b
        a3(9,4)=t_h1b
        a3(9,5)=t_h3b
        a3(9,6)=t_h2b
c
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
        enddo
c
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p5b.le.p6b).and.(h1b.le.h2b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
c     prep. work
c     figure out  cycles to work on
      n_p7b=0
      DO p7b = noab+1,noab+nvab
         if(tce_hashnsort_2(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_p7b=n_p7b+1
         endif
      enddo
# 701 "offl_ccsd_t_doubles_l.F"
      if(n_p7b.ne.0) then
# 706 "offl_ccsd_t_doubles_l.F"
      do p7b_in= ga_nodeid()+1,nvab+ga_nodeid()
         p7b=mod(p7b_in,nvab)+noab+1
# 709 "offl_ccsd_t_doubles_l.F"
         if(tce_hashnsort_2(.false.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub)) then
# 716 "offl_ccsd_t_doubles_l.F"
            k_range_p7b_1 = int_mb(k_range+p7b-1)
# 718 "offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '='
# 728 "offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 739 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_1(k_range_h3b_1,k_range_h2b_1,
# 741 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl21,fdist_sdcomp21)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 760 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_2(k_range_h3b_1,k_range_h2b_1,
# 762 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl22,fdist_sdcomp22)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 781 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_3(k_range_h3b_1,k_range_h2b_1,
# 783 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl23,fdist_sdcomp23)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 802 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_4(k_range_h3b_1,k_range_h2b_1,
# 804 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl24,fdist_sdcomp24)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
# 816 "offl_ccsd_t_doubles_l.F"
c        call tce_sdtime0(t0)
# 824 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_5(k_range_h3b_1,k_range_h2b_1,
# 826 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl25,fdist_sdcomp25)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 845 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_6(k_range_h3b_1,k_range_h2b_1,
# 847 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl26,fdist_sdcomp26)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 866 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_7(k_range_h3b_1,k_range_h2b_1,
# 868 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl27,fdist_sdcomp27)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 887 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_8(k_range_h3b_1,k_range_h2b_1,
# 889 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl28,fdist_sdcomp28)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 908 "offl_ccsd_t_doubles_l.F"
         call sdtransp_t_d2_9(k_range_h3b_1,k_range_h2b_1,
# 910 "offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl29,fdist_sdcomp29)
      END IF
# 927 "offl_ccsd_t_doubles_l.F"
      endif
      END DO ! p7b loop
# 930 "offl_ccsd_t_doubles_l.F"
      endif ! n_p7b.ne.0
c
c
      END IF
      END DO ! ia6 loop
# 950 "offl_ccsd_t_doubles_l.F"
      RETURN
      END
# 956 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 958 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 968 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 976 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 977 "offl_ccsd_t_doubles_l.F"
# 985 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 987 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
cz!DEC$ unroll_and_jam (2)
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h3d*h2d
       triplesx(h2h3,h1,p6,p5,p4)=triplesx(h2h3,h1,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1008 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1010 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1011 "offl_ccsd_t_doubles_l.F"
# 1011 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1017 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1019 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1029 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision v2sub(*)
# 1039 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1041 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1042 "offl_ccsd_t_doubles_l.F"
# 1042 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1046 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1048 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1058 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(4)
# 1060 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1083 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1085 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1086 "offl_ccsd_t_doubles_l.F"
# 1086 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1092 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1094 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1104 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1106 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p6d,p5d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
c      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1117 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1119 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1120 "offl_ccsd_t_doubles_l.F"
# 1120 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1124 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1126 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1136 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h3h2,h1,h7) collapse(3)
# 1138 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p6,p5,p4)=triplesx(h1,h3h2,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1160 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1162 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1163 "offl_ccsd_t_doubles_l.F"
# 1163 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1169 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1171 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1181 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1183 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1190 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1191 "offl_ccsd_t_doubles_l.F"
# 1199 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 1201 "offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p4,p6)=triplesx(h2h3,h1,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1220 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1222 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1223 "offl_ccsd_t_doubles_l.F"
# 1223 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1229 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1231 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     d     deltat)
# 1241 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1243 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1252 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1254 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1255 "offl_ccsd_t_doubles_l.F"
# 1255 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1259 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1261 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1271 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h3,h2,h1,h7) collapse(3)
# 1273 "offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p4,p6)=triplesx(h3,h1,h2,p5,p4,p6)
     1    + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1298 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1300 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1301 "offl_ccsd_t_doubles_l.F"
# 1301 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1307 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1309 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1319 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1321 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h1d,h3d*h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1331 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1333 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1334 "offl_ccsd_t_doubles_l.F"
# 1334 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1338 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1340 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1350 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h3,h1,h7) collapse(3)
# 1352 "offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h2h3=1,h2d*h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h2h3,p5,p4,p6)=triplesx(h1,h2h3,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h2h3,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1373 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1375 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1376 "offl_ccsd_t_doubles_l.F"
# 1376 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1382 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 1384 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1394 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1396 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1403 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1404 "offl_ccsd_t_doubles_l.F"
# 1412 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 1414 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p6,p4)=triplesx(h2h3,h1,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1433 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1435 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1436 "offl_ccsd_t_doubles_l.F"
# 1436 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1442 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 1444 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1454 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
      double precision scratch(h7d,h3d,h2d,p6d)
# 1464 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1466 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1467 "offl_ccsd_t_doubles_l.F"
# 1467 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1471 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1473 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1483 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h3,h1,h7) collapse(3)
# 1485 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p6,p4)=triplesx(h3,h1,h2,p5,p6,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1509 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1511 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1512 "offl_ccsd_t_doubles_l.F"
# 1512 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1518 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d1_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 1520 "offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1530 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1532 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p5d,p6d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1542 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7326
# 1544 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1545 "offl_ccsd_t_doubles_l.F"
# 1545 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1549 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7326(
# 1551 "offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1561 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h3h2,h1,h7) collapse(3)
# 1563 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p5,p6,p4)=triplesx(h1,h3h2,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1584 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1586 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1587 "offl_ccsd_t_doubles_l.F"
# 1587 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1593 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 1595 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1605 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1607 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1615 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1617 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1618 "offl_ccsd_t_doubles_l.F"
# 1621 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1623 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1633 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h1,h3,p7) collapse(3)
# 1635 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1658 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1660 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1661 "offl_ccsd_t_doubles_l.F"
# 1661 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1667 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1669 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1679 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1681 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p5d,p4d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1690 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2
# 1692 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1693 "offl_ccsd_t_doubles_l.F"
# 1693 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1697 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2(
# 1699 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1709 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h1,h3,p7) collapse(3)
# 1711 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p5,p4)=triplesx(h2h1,h3,p6,p5,p4)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1731 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1733 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1734 "offl_ccsd_t_doubles_l.F"
# 1734 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1740 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1742 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1752 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1754 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d)
# 1763 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1765 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1766 "offl_ccsd_t_doubles_l.F"
# 1766 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1770 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1772 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 1782 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 1784 "offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p5,p4)=triplesx(h2,h3,h1,p6,p5,p4) +
     C        scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1807 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1809 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1810 "offl_ccsd_t_doubles_l.F"
# 1810 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1816 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1818 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1828 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1830 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p4d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1838 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1840 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1841 "offl_ccsd_t_doubles_l.F"
# 1841 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1845 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1847 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1857 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2,h1,h3,p7) collapse(4)
# 1859 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p4,p5)=triplesx(h3,h2,h1,p6,p4,p5)
     1   + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1883 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1885 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1886 "offl_ccsd_t_doubles_l.F"
# 1886 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1892 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1894 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1904 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1906 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p4d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1915 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2
# 1917 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1918 "offl_ccsd_t_doubles_l.F"
# 1918 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1922 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2(
# 1924 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1934 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h1,h3,p7) collapse(3)
# 1936 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p4,p5)=triplesx(h2h1,h3,p6,p4,p5)
     1   + scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1957 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 1959 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1960 "offl_ccsd_t_doubles_l.F"
# 1960 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1966 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1968 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1978 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1980 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1989 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 1991 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1992 "offl_ccsd_t_doubles_l.F"
# 1995 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 1997 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2007 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 2009 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p4,p5)=triplesx(h2,h3,h1,p6,p4,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2031 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2033 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2034 "offl_ccsd_t_doubles_l.F"
# 2034 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2040 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 2042 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2052 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2054 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2063 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 2065 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2066 "offl_ccsd_t_doubles_l.F"
# 2066 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2070 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 2072 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2082 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 2084 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p4,p6,p5)=triplesx(h3,h2,h1,p4,p6,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2107 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2109 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2110 "offl_ccsd_t_doubles_l.F"
# 2110 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2116 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 2118 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2128 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2130 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p4d,p6d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2139 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2
# 2141 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2142 "offl_ccsd_t_doubles_l.F"
# 2145 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2(
# 2147 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 2157 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p4,p5,p6,h2h1,h3,p7) collapse(3)
# 2159 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p4,p6,p5)=triplesx(h2h1,h3,p4,p6,p5)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2180 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2182 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2183 "offl_ccsd_t_doubles_l.F"
# 2183 "offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2189 "offl_ccsd_t_doubles_l.F"
      subroutine sdtransp_t_d2_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 2191 "offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2201 "offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2203 "offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2212 "offl_ccsd_t_doubles_l.F"
      external ccsd_t_transpt2_7124
# 2214 "offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2215 "offl_ccsd_t_doubles_l.F"
# 2215 "offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2219 "offl_ccsd_t_doubles_l.F"
      call ccsd_t_transpt2_7124(
# 2221 "offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2231 "offl_ccsd_t_doubles_l.F"
!$omp parallel do private(p5,p6,p4,h1,h3,h2,p7) collapse(4)
# 2233 "offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p4,p6,p5)=triplesx(h2,h3,h1,p4,p6,p5)
     1    + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2256 "offl_ccsd_t_doubles_l.F"
!$omp end parallel do
# 2258 "offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2259 "offl_ccsd_t_doubles_l.F"
# 2259 "offl_ccsd_t_doubles_l.F"
      return
      end
# 2265 "offl_ccsd_t_doubles_l.F"
c
c     Compile source again for offload code
c
# 2268 "offl_ccsd_t_doubles_l.F"
# 1 "./offl_ccsd_t_doubles_l.F"
C$Id$
# 3 "./offl_ccsd_t_doubles_l.F"
c     Modifications (c) 2021 Advanced Micro Devices, Inc. All Rights Reserved.
# 19 "./offl_ccsd_t_doubles_l.F"
C #ifndef DEBUG_TRIPLESX
C #define DEBUG_TRIPLESX 1
C #endif
# 76 "./offl_ccsd_t_doubles_l.F"
c     the mapping functions won't be needed
# 94 "./offl_ccsd_t_doubles_l.F"
      SUBROUTINE offl0_ccsd_t_doubles_l_12(d_a,k_a_offset,
# 98 "./offl_ccsd_t_doubles_l.F"
     &d_b,k_b_offset,triplesx,t_p4
     &b,t_p5b,t_p6b,t_h1b,t_h2b,t_h3b,
     T     v2sub,t2sub,scratch)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = -1 * P( 9 ) * Sum ( h7 ) * t ( p4 p5 h1 h7 )_t * v ( h7 p6 h2 h3 )_v
c
c elimination of the transpositions (kowalski,august,2009)
c
      IMPLICIT NONE
# 108 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/gacommon.h"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/global.fh"
      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      logical          ga_allocate
      logical          ga_deallocate
      complex          ga_cdot
      complex          ga_cdot_patch
      integer          ga_cluster_nnodes
      integer          ga_cluster_nodeid
      integer          ga_cluster_nprocs
      integer          ga_cluster_procid
      integer          ga_cluster_proc_nodeid
      logical          ga_compare_distr
      logical          ga_create
      integer          ga_create_handle
      logical          ga_create_irreg
      logical          ga_create_mutexes
      double precision ga_ddot
      double precision ga_ddot_patch
      logical          ga_destroy
      logical          ga_destroy_mutexes
      logical          ga_duplicate
      logical          ga_get_debug
      integer          ga_get_dimension
      integer          ga_get_pgroup
      integer          ga_get_pgroup_size
      logical          ga_has_ghosts
      integer          ga_idot
      logical          ga_initialized
      integer          ga_inquire_memory
      integer          ga_is_mirrored
      integer          ga_llt_solve
      logical          ga_locate
      logical          ga_locate_region
      integer          ga_memory_avail
      logical          ga_memory_limited
      integer          ga_nbtest
      integer          ga_ndim
      integer          ga_nnodes
      integer          ga_nodeid
      logical          ga_overlay
      integer          ga_pgroup_absolute_id
      integer          ga_pgroup_create
      integer          ga_pgroup_duplicate
      integer          ga_pgroup_self
      logical          ga_pgroup_destroy
      integer          ga_pgroup_get_default
      integer          ga_pgroup_get_mirror
      integer          ga_pgroup_get_world
      integer          ga_pgroup_nnodes
      integer          ga_pgroup_nodeid
      integer          ga_pgroup_split
      integer          ga_pgroup_split_irreg
      integer          ga_read_inc
      real             ga_sdot
      real             ga_sdot_patch
      logical          ga_set_update4_info
      logical          ga_set_update5_info
      integer          ga_solve
      integer          ga_spd_invert
      integer          ga_total_blocks
      logical          ga_update2_ghosts
      logical          ga_update3_ghosts
      logical          ga_update4_ghosts
      logical          ga_update5_ghosts
      logical          ga_update6_ghosts
      logical          ga_update7_ghosts
      logical          ga_uses_ma
      logical          ga_uses_proc_grid
      logical          ga_valid_handle
      logical          ga_verify_handle
      double precision ga_wtime
      double complex   ga_zdot
      double complex   ga_zdot_patch
      logical          nga_allocate
      logical          nga_deallocate
      complex          nga_cdot
      complex          nga_cdot_patch
      integer          nga_cluster_nnodes
      integer          nga_cluster_nodeid
      integer          nga_cluster_nprocs
      integer          nga_cluster_procid
      integer          nga_cluster_proc_nodeid
      logical          nga_compare_distr
      logical          nga_create
      logical          nga_create_config
      logical          nga_create_ghosts
      logical          nga_create_ghosts_config
      logical          nga_create_ghosts_irreg
      logical          nga_create_ghosts_irreg_config
      integer          nga_create_handle
      logical          nga_create_irreg
      logical          nga_create_irreg_config
      logical          nga_create_mutexes
      double precision nga_ddot
      double precision nga_ddot_patch
      integer          nga_deregister_type
      logical          nga_destroy
      logical          nga_destroy_mutexes
      logical          nga_duplicate
      logical          nga_get_debug
      integer          nga_get_dimension
      integer          nga_get_pgroup
      integer          nga_get_pgroup_size
      logical          nga_has_ghosts
      integer          nga_idot
      integer          nga_idot_patch
      logical          nga_initialized
      integer          nga_inquire_memory
      integer          nga_is_mirrored
      integer          nga_llt_solve
      logical          nga_locate
      integer          nga_locate_num_blocks
      logical          nga_locate_region
      integer          nga_memory_avail
      logical          nga_memory_limited
      integer          nga_nbtest
      integer          nga_ndim
      integer          nga_nnodes
      integer          nga_nodeid
      logical          nga_overlay
      integer          nga_pgroup_absolute_id
      integer          nga_pgroup_create
      integer          nga_pgroup_duplicate
      integer          nga_pgroup_self
      logical          nga_pgroup_destroy
      integer          nga_pgroup_get_default
      integer          nga_pgroup_get_mirror
      integer          nga_pgroup_get_world
      integer          nga_pgroup_nnodes
      integer          nga_pgroup_nodeid
      integer          nga_pgroup_split
      integer          nga_pgroup_split_irreg
      integer          nga_read_inc
      integer          nga_register_type
      real             nga_sdot
      real             nga_sdot_patch
      logical          nga_set_update4_info
      logical          nga_set_update5_info
      integer          nga_solve
      integer          nga_spd_invert
      integer          nga_total_blocks
      logical          nga_update2_ghosts
      logical          nga_update3_ghosts
      logical          nga_update4_ghosts
      logical          nga_update5_ghosts
      logical          nga_update6_ghosts
      logical          nga_update7_ghosts
      logical          nga_update_ghost_dir
      logical          nga_uses_ma
      logical          nga_uses_proc_grid
      logical          nga_valid_handle
      logical          nga_verify_handle
      double precision nga_wtime
      double complex   nga_zdot
      double complex   nga_zdot_patch
!
      external ga_allocate
      external ga_deallocate
      external ga_cdot
      external ga_cdot_patch
      external ga_cluster_nnodes
      external ga_cluster_nodeid
      external ga_cluster_nprocs
      external ga_cluster_procid
      external ga_cluster_proc_nodeid
      external ga_compare_distr
      external ga_create
      external ga_create_handle
      external ga_create_irreg
      external ga_create_mutexes
      external ga_ddot
      external ga_ddot_patch
      external ga_destroy
      external ga_destroy_mutexes
      external ga_duplicate
      external ga_get_debug
      external ga_get_dimension
      external ga_get_pgroup
      external ga_get_pgroup_size
      external ga_has_ghosts
      external ga_idot
      external ga_initialized
      external ga_inquire_memory
      external ga_is_mirrored
      external ga_llt_solve
      external ga_locate
      external ga_locate_region
      external ga_memory_avail
      external ga_memory_limited
      external ga_nbtest
      external ga_ndim
      external ga_nnodes
      external ga_nodeid
      external ga_overlay
      external ga_pgroup_absolute_id
      external ga_pgroup_create
      external ga_pgroup_duplicate
      external ga_pgroup_self
      external ga_pgroup_destroy
      external ga_pgroup_get_default
      external ga_pgroup_get_mirror
      external ga_pgroup_get_world
      external ga_pgroup_nnodes
      external ga_pgroup_nodeid
      external ga_pgroup_split
      external ga_pgroup_split_irreg
      external ga_read_inc
      external ga_sdot
      external ga_sdot_patch
      external ga_set_update4_info
      external ga_set_update5_info
      external ga_solve
      external ga_spd_invert
      external ga_total_blocks
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_uses_ma
      external ga_uses_proc_grid
      external ga_valid_handle
      external ga_verify_handle
      external ga_wtime
      external ga_zdot
      external ga_zdot_patch
      external nga_allocate
      external nga_deallocate
      external nga_cdot
      external nga_cdot_patch
      external nga_cluster_nnodes
      external nga_cluster_nodeid
      external nga_cluster_nprocs
      external nga_cluster_procid
      external nga_cluster_proc_nodeid
      external nga_compare_distr
      external nga_create
      external nga_create_config
      external nga_create_ghosts
      external nga_create_ghosts_config
      external nga_create_ghosts_irreg
      external nga_create_ghosts_irreg_config
      external nga_create_handle
      external nga_create_irreg
      external nga_create_irreg_config
      external nga_create_mutexes
      external nga_ddot
      external nga_ddot_patch
      external nga_deregister_type
      external nga_destroy
      external nga_destroy_mutexes
      external nga_duplicate
      external nga_get_debug
      external nga_get_dimension
      external nga_get_field
      external nga_get_pgroup
      external nga_get_pgroup_size
      external nga_has_ghosts
      external nga_idot
      external nga_idot_patch
      external nga_initialized
      external nga_inquire_memory
      external nga_is_mirrored
      external nga_llt_solve
      external nga_locate
      external nga_locate_num_blocks
      external nga_locate_region
      external nga_memory_avail
      external nga_memory_limited
      external nga_nbget_field
      external nga_nbput_field
      external nga_nbtest
      external nga_ndim
      external nga_nnodes
      external nga_nodeid
      external nga_overlay
      external nga_pgroup_absolute_id
      external nga_pgroup_create
      external nga_pgroup_duplicate
      external nga_pgroup_self
      external nga_pgroup_destroy
      external nga_pgroup_get_default
      external nga_pgroup_get_mirror
      external nga_pgroup_get_world
      external nga_pgroup_nnodes
      external nga_pgroup_nodeid
      external nga_pgroup_split
      external nga_pgroup_split_irreg
      external nga_put_field
      external nga_read_inc
      external nga_register_type
      external nga_sdot
      external nga_sdot_patch
      external nga_set_update4_info
      external nga_set_update5_info
      external nga_solve
      external nga_spd_invert
      external nga_total_blocks
      external nga_update2_ghosts
      external nga_update3_ghosts
      external nga_update4_ghosts
      external nga_update5_ghosts
      external nga_update6_ghosts
      external nga_update7_ghosts
      external nga_update_ghost_dir
      external nga_uses_ma
      external nga_uses_proc_grid
      external nga_valid_handle
      external nga_verify_handle
      external nga_wtime
      external nga_zdot
      external nga_zdot_patch
!
# 109 "./offl_ccsd_t_doubles_l.F"
# 109 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
# 25 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     constants
!
# 29 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex
# 38 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type
# 41 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))
# 50 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)
# 53 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     function types
!
# 58 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff
# 90 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff
# 123 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!
!     variables
!
# 130 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
!     common blocks
# 137 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_byte/ byte_mb(2)
      character*1       byte_mb
# 145 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_int/  int_mb(2)
      integer           int_mb
# 150 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_log/  log_mb(2)
      logical           log_mb
# 158 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_real/ real_mb(2)
      real              real_mb
# 166 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dbl/  dbl_mb(2)
      double precision  dbl_mb
# 174 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_scpl/ scpl_mb(2)
      complex           scpl_mb
# 182 "/home/micklemm/projects/nwchem/craype/src/tools/install/include/mafdecls.fh"
      common /mbc_dcpl/ dcpl_mb(2)
      double complex    dcpl_mb
# 110 "./offl_ccsd_t_doubles_l.F"
# 110 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/sym.fh"
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id$
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 111 "./offl_ccsd_t_doubles_l.F"
# 111 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/errquit.fh"
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id$
# 112 "./offl_ccsd_t_doubles_l.F"
# 112 "./offl_ccsd_t_doubles_l.F"
# 1 "../include/tce.fh"
c
c $Id$
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor
      integer ea_unused_spin,ea_unused_sym
      integer ip_unused_spin,ip_unused_sym
# 89 "../include/tce.fh"
      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e,
     6  ea_unused_spin,ea_unused_sym,
     7  ip_unused_spin,ip_unused_sym
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd
# 104 "../include/tce.fh"
      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 113 "./offl_ccsd_t_doubles_l.F"
# 113 "./offl_ccsd_t_doubles_l.F"
# 1 "./ccsd_t_ps.fh"
C$Id$
c
c     pstat handles for the TCE code
c
      integer ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
     
# 32 "./ccsd_t_ps.fh"
      logical otceps            ! True if gathering stats
      common /tceps/ otceps,
     $     ps_tce,
     A     ps_cctdbl,ps_sdkrnl,ps_sxoff,ps_vtoff,
     A	   ps_cctsng,
     I     fdist_vtoff,
     I     fdist_sxoff,
     I     fdist_sdkrnl,fdist_sdcomp,
     I     fdist_sdkrnl4,fdist_sdcomp4,
     I     fdist_sdkrnl11,fdist_sdcomp11,
     I     fdist_sdkrnl12,fdist_sdcomp12,
     I     fdist_sdkrnl13,fdist_sdcomp13,
     I     fdist_sdkrnl14,fdist_sdcomp14,
     I     fdist_sdkrnl15,fdist_sdcomp15,
     I     fdist_sdkrnl16,fdist_sdcomp16,
     I     fdist_sdkrnl17,fdist_sdcomp17,
     I     fdist_sdkrnl18,fdist_sdcomp18,
     I     fdist_sdkrnl19,fdist_sdcomp19,
     I     fdist_sdkrnl21,fdist_sdcomp21,
     I     fdist_sdkrnl22,fdist_sdcomp22,
     I     fdist_sdkrnl23,fdist_sdcomp23,
     I     fdist_sdkrnl24,fdist_sdcomp24,
     I     fdist_sdkrnl25,fdist_sdcomp25,
     I     fdist_sdkrnl26,fdist_sdcomp26,
     I     fdist_sdkrnl27,fdist_sdcomp27,
     I     fdist_sdkrnl28,fdist_sdcomp28,
     I     fdist_sdkrnl29,fdist_sdcomp29
# 60 "./ccsd_t_ps.fh"
c
# 114 "./offl_ccsd_t_doubles_l.F"
# 114 "./offl_ccsd_t_doubles_l.F"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 1 "/home/micklemm/projects/nwchem/craype/src/include/printlevels.fh"
      integer print_none, print_low, print_medium, print_high, 
     $     print_debug, print_default, print_never
C$Id$
      parameter (print_none=0, print_low=10, print_medium=20,
     $     print_high=30, print_debug=100, print_never=1000000)
      parameter (print_default = print_medium)
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
# 2 "/home/micklemm/projects/nwchem/craype/src/include/util.fh"
c      
C$Id$
      logical util_print
      double precision util_cpusec
      double precision util_wallsec
      double precision util_random
      integer util_batch_job_time_remaining
      integer util_time_remaining
      logical util_test_time_remaining
      logical util_nwchemrc_get
      logical util_module_avail
      external util_print
      external util_cpusec
      external util_wallsec
      external util_random
      external util_batch_job_time_remaining
      external util_time_remaining
      external util_test_time_remaining
      external util_nwchemrc_get
      external util_module_avail
c
      logical util_xyz_seek
      external util_xyz_seek
      logical util_xyz_nframes
      external util_xyz_nframes
c
      logical util_get_io_unit
      external util_get_io_unit
c
      integer nw_max_path_len   ! Maximum path len -> posix standard is what?
      parameter (nw_max_path_len = 255)
c
# 115 "./offl_ccsd_t_doubles_l.F"
# 115 "./offl_ccsd_t_doubles_l.F"
# 1 "../include/offl.fh"
C$Id$
# 4 "../include/offl.fh"
CCC#define ASYNC 1
c k_a_sort t2sub
c k_b_sort v2sub
      integer	triplesx_mxlgth
# 116 "./offl_ccsd_t_doubles_l.F"
# 116 "./offl_ccsd_t_doubles_l.F"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p4b
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b,p7b
      integer p5b_2,p7b_1,h2b_1,p7b_2
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER p6b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b
      INTEGER k_b
c -- peta-exa --
      INTEGER a3(9,6)
      INTEGER ia6,ja6
c --------------
      DOUBLE PRECISION triplesx(*)
c --------------
      INTEGER k_range_h3b_1
      INTEGER k_range_h2b_1
      INTEGER k_range_h1b_1
      INTEGER k_range_p6b_1
      INTEGER k_range_p5b_1
      INTEGER k_range_p4b_1
      INTEGER k_range_h7b_1
      INTEGER k_range_p7b_1
      INTEGER k_a_srt_len
      INTEGER k_b_srt_len
C #ifdef OFFLOAD_CODE
      integer l_t2sub,l_triplesx,l_v2sub
C #endif
      double precision t2sub(*),v2sub(*),scratch(*)
      logical tce_hashnsort,lresult
      external tce_hashnsort
      logical tce_hashnsort_2
      external tce_hashnsort_2
      integer n_h7b
      integer n_p7b
      double precision t0
      integer deltat_mic,deltat_off
# 183 "./offl_ccsd_t_doubles_l.F"
      double precision omp_get_wtime
      external omp_get_wtime
# 186 "./offl_ccsd_t_doubles_l.F"
      integer h7b_in,p7b_in
# 188 "./offl_ccsd_t_doubles_l.F"
C #ifdef OFFLOAD_CODE
cfrom l_triplesx
      l_triplesx=
     c int_mb(k_range+t_h3b-1)*
     c int_mb(k_range+t_h2b-1)*
     c int_mb(k_range+t_h1b-1)*
     c int_mb(k_range+t_p6b-1)*
     c int_mb(k_range+t_p5b-1)*
     c int_mb(k_range+t_p4b-1)
      call ccsd_t_v2t2lgth(l_t2sub,l_v2sub)
C #endif
# 200 "./offl_ccsd_t_doubles_l.F"
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h1b
        a3(2,6)=t_h3b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h3b
        a3(3,5)=t_h1b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p6b
        a3(4,3)=t_p4b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p6b
        a3(5,3)=t_p4b
        a3(5,4)=t_h2b
        a3(5,5)=t_h1b
        a3(5,6)=t_h3b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p6b
        a3(6,3)=t_p4b
        a3(6,4)=t_h3b
        a3(6,5)=t_h1b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p4b
        a3(7,2)=t_p6b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p4b
        a3(8,2)=t_p6b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h1b
        a3(8,6)=t_h3b
c
        a3(9,1)=t_p4b
        a3(9,2)=t_p6b
        a3(9,3)=t_p5b
        a3(9,4)=t_h3b
        a3(9,5)=t_h1b
        a3(9,6)=t_h2b
c
# 264 "./offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") ':'
# 267 "./offl_ccsd_t_doubles_l.F"
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
      enddo
c
# 287 "./offl_ccsd_t_doubles_l.F"
      write (*,*) 'DIRECTIVES MAPPING scratch', l_t2sub*8, 'bytes'
!$omp target data map(alloc:scratch(1:l_t2sub))
# 294 "./offl_ccsd_t_doubles_l.F"
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p4b.le.p5b).and.(h2b.le.h3b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
# 312 "./offl_ccsd_t_doubles_l.F"
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
c
c
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
# 325 "./offl_ccsd_t_doubles_l.F"
c     prep. work
c     figure out  cycles to work on
      n_h7b=0
      DO h7b = 1,noab
         if(tce_hashnsort(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p5b,h1b,h7b,
     I        p6b,h2b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_h7b=n_h7b+1
         endif
      enddo
# 340 "./offl_ccsd_t_doubles_l.F"
      if(n_h7b.gt.0) then
# 345 "./offl_ccsd_t_doubles_l.F"
         do h7b_in=ga_nodeid()+1,ga_nodeid()+noab
            h7b=mod(h7b_in,noab)+1
# 348 "./offl_ccsd_t_doubles_l.F"
            if(tce_hashnsort(.false.,
     d           d_a, d_b,
     I           k_a_offset,k_b_offset,
     I           p4b,p5b,h1b,h7b,
     I           p6b,h2b,h3b,
     O           t2sub,v2sub)) then
            k_range_h7b_1 = int_mb(k_range+h7b-1)
# 356 "./offl_ccsd_t_doubles_l.F"
      write (*,'(A)',advance="no") '+'
# 360 "./offl_ccsd_t_doubles_l.F"
      write (*,*) 'DIRECTIVES MAPPING t2', l_t2sub*8, 'bytes'
      write (*,*) 'DIRECTIVES MAPPING v2:', l_v2sub*8, 'bytes'
!$omp target data map(to:t2sub(1:l_t2sub)) map(to:v2sub(1:l_v2sub))
# 370 "./offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 376 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_1(k_range_h3b_1,k_range_h2b_1,
# 383 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     d     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl11,fdist_sdcomp11)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 397 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_2(k_range_h3b_1,k_range_h2b_1,
# 404 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl12,fdist_sdcomp12)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c      call tce_sdtime0(t0)
# 418 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_3(k_range_h3b_1,k_range_h2b_1,
# 425 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl13,fdist_sdcomp13)
       END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 439 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_4(k_range_h3b_1,k_range_h2b_1,
# 446 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl14,fdist_sdcomp14)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c      call tce_sdtime0(t0)
# 460 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_5(k_range_h3b_1,k_range_h2b_1,
# 467 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c      call tce_sdtime(t0,deltat_mic,
c     ,     fdist_sdkrnl15,fdist_sdcomp15)
      END IF
      IF ((t_p4b .eq. p6b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 481 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_6(k_range_h3b_1,k_range_h2b_1,
# 488 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl16,fdist_sdcomp16)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 502 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_7(k_range_h3b_1,k_range_h2b_1,
# 509 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl17,fdist_sdcomp17)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 523 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_8(k_range_h3b_1,k_range_h2b_1,
# 530 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_h7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl18,fdist_sdcomp18)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p5b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
c        call tce_sdtime0(t0)
# 544 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d1_9(k_range_h3b_1,k_range_h2b_1,
# 551 "./offl_ccsd_t_doubles_l.F"
     1     k_range_h1b_1,k_range_p6b_1,
     2     k_range_p5b_1,k_range_p4b_1,
     3     k_range_h7b_1,
     4     triplesx,t2sub,v2sub,scratch,
     D     deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl19,fdist_sdcomp19)
      END IF
# 561 "./offl_ccsd_t_doubles_l.F"
c     unmap(to:t2sub(1:l_t2sub)) unmap(to:v2sub(1:l_v2sub))
!$omp end target data
# 568 "./offl_ccsd_t_doubles_l.F"
      endif
      END DO !h7b loop
      endif ! n_h7b.ne.0
c
c
      END IF
      END DO !ia6 loop
# 576 "./offl_ccsd_t_doubles_l.F"
cold      SUBROUTINE ccsd_t_doubles_l_2(d_a,k_a_offset,
c
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h3b
        a3(2,6)=t_h1b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h1b
        a3(3,5)=t_h3b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p4b
        a3(4,3)=t_p6b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p4b
        a3(5,3)=t_p6b
        a3(5,4)=t_h2b
        a3(5,5)=t_h3b
        a3(5,6)=t_h1b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p4b
        a3(6,3)=t_p6b
        a3(6,4)=t_h1b
        a3(6,5)=t_h3b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p6b
        a3(7,2)=t_p4b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p6b
        a3(8,2)=t_p4b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h3b
        a3(8,6)=t_h1b
c
        a3(9,1)=t_p6b
        a3(9,2)=t_p4b
        a3(9,3)=t_p5b
        a3(9,4)=t_h1b
        a3(9,5)=t_h3b
        a3(9,6)=t_h2b
c
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo
         end if
        enddo
c
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if(((p5b.le.p6b).and.(h1b.le.h2b).and.(p4b.ne.0)).and.
     A ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)).and.
     A (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)).and.
     A (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t))) THEN
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb(k_ra
     &nge+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
c     prep. work
c     figure out  cycles to work on
      n_p7b=0
      DO p7b = noab+1,noab+nvab
         if(tce_hashnsort_2(.true.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub
     P        )) then
            n_p7b=n_p7b+1
         endif
      enddo
# 701 "./offl_ccsd_t_doubles_l.F"
      if(n_p7b.ne.0) then
# 706 "./offl_ccsd_t_doubles_l.F"
      do p7b_in= ga_nodeid()+1,nvab+ga_nodeid()
         p7b=mod(p7b_in,nvab)+noab+1
# 709 "./offl_ccsd_t_doubles_l.F"
         if(tce_hashnsort_2(.false.,
     d        d_a, d_b,
     I        k_a_offset,k_b_offset,
     I        p4b,p7b,h1b,h2b,
     I        p5b,p6b,h3b,
     O        t2sub,v2sub)) then
# 716 "./offl_ccsd_t_doubles_l.F"
            k_range_p7b_1 = int_mb(k_range+p7b-1)
# 718 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '='
# 722 "./offl_ccsd_t_doubles_l.F"
!$omp target data map(to:t2sub(1:l_t2sub)) map(to:v2sub(1:l_v2sub))
# 728 "./offl_ccsd_t_doubles_l.F"
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 734 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_1(k_range_h3b_1,k_range_h2b_1,
# 741 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl21,fdist_sdcomp21)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 755 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_2(k_range_h3b_1,k_range_h2b_1,
# 762 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl22,fdist_sdcomp22)
      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 776 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_3(k_range_h3b_1,k_range_h2b_1,
# 783 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl23,fdist_sdcomp23)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 797 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_4(k_range_h3b_1,k_range_h2b_1,
# 804 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl24,fdist_sdcomp24)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
# 816 "./offl_ccsd_t_doubles_l.F"
c        call tce_sdtime0(t0)
# 819 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_5(k_range_h3b_1,k_range_h2b_1,
# 826 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl25,fdist_sdcomp25)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 840 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_6(k_range_h3b_1,k_range_h2b_1,
# 847 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl26,fdist_sdcomp26)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
c        call tce_sdtime0(t0)
# 861 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_7(k_range_h3b_1,k_range_h2b_1,
# 868 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl27,fdist_sdcomp27)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 882 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_8(k_range_h3b_1,k_range_h2b_1,
# 889 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl28,fdist_sdcomp28)
      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &2b)) THEN
c        call tce_sdtime0(t0)
# 903 "./offl_ccsd_t_doubles_l.F"
         call offl_ccsd_t_d2_9(k_range_h3b_1,k_range_h2b_1,
# 910 "./offl_ccsd_t_doubles_l.F"
     1        k_range_h1b_1,k_range_p6b_1,
     2        k_range_p5b_1,k_range_p4b_1,
     3        k_range_p7b_1,
     4        triplesx,t2sub,v2sub,scratch,
     D        deltat_mic)
c         call tce_sdtime(t0,deltat_mic,
c     ,        fdist_sdkrnl29,fdist_sdcomp29)
      END IF
# 920 "./offl_ccsd_t_doubles_l.F"
c     unmap(to:t2sub(1:l_t2sub)) unmap(to:v2sub(1:l_v2sub))
!$omp end target data
# 927 "./offl_ccsd_t_doubles_l.F"
      endif
      END DO ! p7b loop
# 930 "./offl_ccsd_t_doubles_l.F"
      endif ! n_p7b.ne.0
c
c
      END IF
      END DO ! ia6 loop
# 939 "./offl_ccsd_t_doubles_l.F"
c     unmap(to:scratch(1:l_t2sub))
!$omp end target data
# 950 "./offl_ccsd_t_doubles_l.F"
      RETURN
      END
# 954 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 958 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 968 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 976 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 977 "./offl_ccsd_t_doubles_l.F"
# 979 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '1'
# 981 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 987 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
cz!DEC$ unroll_and_jam (2)
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h3d*h2d
       triplesx(h2h3,h1,p6,p5,p4)=triplesx(h2h3,h1,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1005 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1010 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1011 "./offl_ccsd_t_doubles_l.F"
# 1011 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1015 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1019 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1029 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision v2sub(*)
# 1037 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1041 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1042 "./offl_ccsd_t_doubles_l.F"
# 1042 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1044 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1048 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1052 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '2'
# 1054 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1060 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1080 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1085 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1086 "./offl_ccsd_t_doubles_l.F"
# 1086 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1090 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1094 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1104 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1106 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p6d,p5d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
c      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1115 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1119 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1120 "./offl_ccsd_t_doubles_l.F"
# 1120 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1122 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1126 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1130 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '3'
# 1132 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1138 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (4)
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p6,p5,p4)=triplesx(h1,h3h2,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1157 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1162 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1163 "./offl_ccsd_t_doubles_l.F"
# 1163 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1167 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1171 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1181 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1183 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1190 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1191 "./offl_ccsd_t_doubles_l.F"
# 1193 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '4'
# 1195 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1201 "./offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p4,p6)=triplesx(h2h3,h1,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1217 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1222 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1223 "./offl_ccsd_t_doubles_l.F"
# 1223 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1227 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1231 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     d     deltat)
# 1241 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1243 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d,h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
# 1250 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1254 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1255 "./offl_ccsd_t_doubles_l.F"
# 1255 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1257 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1261 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1265 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '5'
# 1267 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3,h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1273 "./offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p4,p6)=triplesx(h3,h1,h2,p5,p4,p6)
     1    + t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1295 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1300 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1301 "./offl_ccsd_t_doubles_l.F"
# 1301 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1305 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1309 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1319 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1321 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h1d,h3d*h2d,p5d,p4d,p6d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1329 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1333 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1334 "./offl_ccsd_t_doubles_l.F"
# 1334 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1336 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1340 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1344 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '6'
# 1346 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1352 "./offl_ccsd_t_doubles_l.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h2h3=1,h2d*h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h2h3,p5,p4,p6)=triplesx(h1,h2h3,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h2h3,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1370 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1375 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1376 "./offl_ccsd_t_doubles_l.F"
# 1376 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1380 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 1384 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1394 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1396 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h2h3
      double precision triplesx(h3d*h2d,h1d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d*h2d,p6d,h7d)
      double precision scratch
# 1403 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1404 "./offl_ccsd_t_doubles_l.F"
# 1406 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '7'
# 1408 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1414 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h1=1,h1d
      do h7=1,h7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h3=1,h2d*h3d
       triplesx(h2h3,h1,p5,p6,p4)=triplesx(h2h3,h1,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h2h3,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1430 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1435 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1436 "./offl_ccsd_t_doubles_l.F"
# 1436 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1440 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 1444 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1454 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
      double precision scratch(h7d,h3d,h2d,p6d)
# 1462 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1466 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1467 "./offl_ccsd_t_doubles_l.F"
# 1467 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1469 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1473 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1477 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '8'
# 1479 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1485 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
c!DEC$ unroll_and_jam (2)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p6,p4)=triplesx(h3,h1,h2,p5,p6,p4)
     1   - t2sub(h7,p4,p5,h1)*scratch(h7,h3,h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1506 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1511 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1512 "./offl_ccsd_t_doubles_l.F"
# 1512 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1516 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d1_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 1520 "./offl_ccsd_t_doubles_l.F"
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 1530 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1532 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d*h2d,p5d,p6d,p4d)
      double precision scratch(h7d,h3d*h2d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(*)
# 1540 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7326
# 1544 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 1545 "./offl_ccsd_t_doubles_l.F"
# 1545 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1547 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7326(
# 1551 "./offl_ccsd_t_doubles_l.F"
     T        v2sub,scratch,
     1     h3d,h2d,p6d,h7d)
# 1555 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") '9'
# 1557 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 1563 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h7=1,h7d
       triplesx(h1,h3h2,p5,p6,p4)=triplesx(h1,h3h2,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*scratch(h7,h3h2,p6)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1581 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1586 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1587 "./offl_ccsd_t_doubles_l.F"
# 1587 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1591 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_1(h3d,h2d,h1d,p6d,p5d,p4d,
# 1595 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1605 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1607 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1613 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1617 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1618 "./offl_ccsd_t_doubles_l.F"
# 1619 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1623 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1627 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'a'
# 1629 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1635 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1655 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1660 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1661 "./offl_ccsd_t_doubles_l.F"
# 1661 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1665 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_2(h3d,h2d,h1d,p6d,p5d,p4d,
# 1669 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1679 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1681 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p5d,p4d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1688 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2
# 1692 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1693 "./offl_ccsd_t_doubles_l.F"
# 1693 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1695 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2(
# 1699 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1703 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'b'
# 1705 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1711 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p5,p4)=triplesx(h2h1,h3,p6,p5,p4)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1728 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1733 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1734 "./offl_ccsd_t_doubles_l.F"
# 1734 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1738 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_3(h3d,h2d,h1d,p6d,p5d,p4d,
# 1742 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1752 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1754 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d)
# 1761 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1765 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1766 "./offl_ccsd_t_doubles_l.F"
# 1766 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1768 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1772 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 1776 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'c'
# 1778 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 1784 "./offl_ccsd_t_doubles_l.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (4)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p5,p4)=triplesx(h2,h3,h1,p6,p5,p4) +
     C        scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1804 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1809 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1810 "./offl_ccsd_t_doubles_l.F"
# 1810 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1814 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_4(h3d,h2d,h1d,p6d,p5d,p4d,
# 1818 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1828 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1830 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p4d,p5d)
      double precision scratch(p7d,h2d,h1d,p4d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1836 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1840 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1841 "./offl_ccsd_t_doubles_l.F"
# 1841 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1843 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1847 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     2     p4d, h1d, h2d, p7d)
# 1851 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'd'
# 1853 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1859 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p4,p5)=triplesx(h3,h2,h1,p6,p4,p5)
     1   + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1880 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1885 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1886 "./offl_ccsd_t_doubles_l.F"
# 1886 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1890 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_5(h3d,h2d,h1d,p6d,p5d,p4d,
# 1894 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1904 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1906 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p6d,p4d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1913 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2
# 1917 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1918 "./offl_ccsd_t_doubles_l.F"
# 1918 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 1920 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2(
# 1924 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 1928 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'e'
# 1930 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 1936 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p6,p4,p5)=triplesx(h2h1,h3,p6,p4,p5)
     1   + scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 1954 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 1959 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 1960 "./offl_ccsd_t_doubles_l.F"
# 1960 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 1964 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_6(h3d,h2d,h1d,p6d,p5d,p4d,
# 1968 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 1978 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 1980 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 1987 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 1991 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 1992 "./offl_ccsd_t_doubles_l.F"
# 1993 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 1997 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2001 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'f'
# 2003 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 2009 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p4,p5)=triplesx(h2,h3,h1,p6,p4,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2028 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2033 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2034 "./offl_ccsd_t_doubles_l.F"
# 2034 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2038 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_7(h3d,h2d,h1d,p6d,p5d,p4d,
# 2042 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2052 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2054 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2061 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 2065 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2066 "./offl_ccsd_t_doubles_l.F"
# 2066 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2068 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 2072 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2076 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'g'
# 2078 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 2084 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h3,h2,h1,p4,p6,p5)=triplesx(h3,h2,h1,p4,p6,p5)
     1   - scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2104 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2109 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2110 "./offl_ccsd_t_doubles_l.F"
# 2110 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2114 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_8(h3d,h2d,h1d,p6d,p5d,p4d,
# 2118 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2128 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2130 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      integer h2h1
      double precision triplesx(h2d*h1d,h3d,p4d,p6d,p5d)
      double precision scratch(h2d*h1d,p4d,p7d),t2sub(*)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2137 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2
# 2141 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2142 "./offl_ccsd_t_doubles_l.F"
# 2143 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2(
# 2147 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     h2d,h1d,p4d,p7d)
# 2151 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'h'
# 2153 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h2h1)
!$omp&collapse(3) schedule(static,1) 
# 2159 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do p7=1,p7d
!DEC$ LOOP COUNT MAX=600, MIN=30
      do h2h1=1,h2d*h1d
       triplesx(h2h1,h3,p4,p6,p5)=triplesx(h2h1,h3,p4,p6,p5)
     1   - scratch(h2h1,p4,p7)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2177 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2182 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2183 "./offl_ccsd_t_doubles_l.F"
# 2183 "./offl_ccsd_t_doubles_l.F"
      return
      end
c
# 2187 "./offl_ccsd_t_doubles_l.F"
      subroutine offl_sdtransp_t_d2_9(h3d,h2d,h1d,p6d,p5d,p4d,
# 2191 "./offl_ccsd_t_doubles_l.F"
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 2201 "./offl_ccsd_t_doubles_l.F"
      IMPLICIT NONE
# 2203 "./offl_ccsd_t_doubles_l.F"
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision scratch(p7d,h2d,h1d,p4d)
      double precision v2sub(p7d,h3d,p6d,p5d)
# 2210 "./offl_ccsd_t_doubles_l.F"
      external offl_ccsd_t_transpt2_7124
# 2214 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 2215 "./offl_ccsd_t_doubles_l.F"
# 2215 "./offl_ccsd_t_doubles_l.F"
CDIR$ NOINLINE
# 2217 "./offl_ccsd_t_doubles_l.F"
      call offl_ccsd_t_transpt2_7124(
# 2221 "./offl_ccsd_t_doubles_l.F"
     T        t2sub,scratch,
     1     p4d,h1d,h2d,p7d)
# 2225 "./offl_ccsd_t_doubles_l.F"
      write (*, '(A)', advance="no") 'i'
# 2227 "./offl_ccsd_t_doubles_l.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 2233 "./offl_ccsd_t_doubles_l.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h3=1,h3d
!DEC$ LOOP COUNT MAX=40, MIN=8
!DEC$ unroll_and_jam (1)
      do h2=1,h2d
!DEC$ LOOP COUNT MAX=40, MIN=8
      do p7=1,p7d
       triplesx(h2,h3,h1,p4,p6,p5)=triplesx(h2,h3,h1,p4,p6,p5)
     1    + scratch(p7,h2,h1,p4)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 2253 "./offl_ccsd_t_doubles_l.F"
!$omp end teams distribute parallel do 
!$omp end target
# 2258 "./offl_ccsd_t_doubles_l.F"
# 1 "./sd_bottom.fh"
C$Id$
# 2259 "./offl_ccsd_t_doubles_l.F"
# 2259 "./offl_ccsd_t_doubles_l.F"
      return
      end
# 2269 "offl_ccsd_t_doubles_l.F"
# 2269 "offl_ccsd_t_doubles_l.F"
# 1 "./offl_ccsd_t_doubles_l_notransp.F"
# 25 "./offl_ccsd_t_doubles_l_notransp.F"
      subroutine offl_ccsd_t_d1_1(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 31 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 38 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 39 "./offl_ccsd_t_doubles_l_notransp.F"
# 41 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '1'
# 43 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 49 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 66 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 71 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 72 "./offl_ccsd_t_doubles_l_notransp.F"
# 72 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_2(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 81 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 88 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 89 "./offl_ccsd_t_doubles_l_notransp.F"
# 91 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '2'
# 93 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 99 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 116 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 121 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 122 "./offl_ccsd_t_doubles_l_notransp.F"
# 122 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_3(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 131 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      integer h3h2
      double precision triplesx(h1d,h3d,h2d,p6d,p5d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 139 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 140 "./offl_ccsd_t_doubles_l_notransp.F"
# 142 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '3'
# 144 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 150 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h3=1,h3d
      do h1=1,h1d
      do h7=1,h7d
       triplesx(h1,h3,h2,p6,p5,p4)=triplesx(h1,h3,h2,p6,p5,p4)
     1  -t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 167 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 172 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 173 "./offl_ccsd_t_doubles_l_notransp.F"
# 173 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_4(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 182 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h2d,h1d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 189 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 190 "./offl_ccsd_t_doubles_l_notransp.F"
# 192 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '4'
# 194 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 200 "./offl_ccsd_t_doubles_l_notransp.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h2,h1,p5,p4,p6)=triplesx(h3,h2,h1,p5,p4,p6)
     1   - t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 217 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 222 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 223 "./offl_ccsd_t_doubles_l_notransp.F"
# 223 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_5(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     d     deltat)
# 232 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 239 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 240 "./offl_ccsd_t_doubles_l_notransp.F"
# 242 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '5'
# 244 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3,h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 250 "./offl_ccsd_t_doubles_l_notransp.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h2=1,h2d
      do h1=1,h1d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p4,p6)=triplesx(h3,h1,h2,p5,p4,p6)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 267 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 272 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 273 "./offl_ccsd_t_doubles_l_notransp.F"
# 273 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_6(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 282 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h1d,h3d,h2d,p5d,p4d,p6d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 289 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 290 "./offl_ccsd_t_doubles_l_notransp.F"
# 292 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '6'
# 294 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 300 "./offl_ccsd_t_doubles_l_notransp.F"
      do p6=1,p6d
      do p4=1,p4d
      do p5=1,p5d
      do h2=1,h2d
      do h3=1,h3d
      do h1=1,h1d
      do h7=1,h7d
       triplesx(h1,h3,h2,p5,p4,p6)=triplesx(h1,h3,h2,p5,p4,p6)
     1  -t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 317 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 322 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 323 "./offl_ccsd_t_doubles_l_notransp.F"
# 323 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_7(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 332 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h2d,h1d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 339 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 340 "./offl_ccsd_t_doubles_l_notransp.F"
# 342 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '7'
# 344 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 350 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h2,h1,p5,p6,p4)=triplesx(h3,h2,h1,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 367 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 372 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 373 "./offl_ccsd_t_doubles_l_notransp.F"
# 373 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_8(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 382 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h3d,h1d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 389 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 390 "./offl_ccsd_t_doubles_l_notransp.F"
# 390 "./offl_ccsd_t_doubles_l_notransp.F"
CDIR$ NOINLINE
# 393 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '8'
# 395 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h3,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 401 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
      do h1=1,h1d
      do h3=1,h3d
      do h7=1,h7d
       triplesx(h3,h1,h2,p5,p6,p4)=triplesx(h3,h1,h2,p5,p6,p4)
     1  -t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 418 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 423 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 424 "./offl_ccsd_t_doubles_l_notransp.F"
# 424 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d1_9(h3d,h2d,h1d,p6d,p5d,p4d,
     1               h7d,
     2               triplesx,t2sub,v2sub,scratch,
     3     deltat)
# 433 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,h7d
      integer h3,h2,h1,p6,p5,p4,h7
      double precision triplesx(h1d,h3d,h2d,p5d,p6d,p4d)
      double precision t2sub(h7d,p4d,p5d,h1d)
      double precision v2sub(h3d,h2d,p6d,h7d)
      double precision scratch
# 440 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_top.fh"
      integer deltat
      double precision t0
# 441 "./offl_ccsd_t_doubles_l_notransp.F"
# 443 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") '9'
# 445 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h3,h2,h1,h7)
!$omp&collapse(3) schedule(static,1) 
# 451 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p6=1,p6d
      do p5=1,p5d
      do h2=1,h2d
      do h3=1,h3d
      do h1=1,h1d
      do h7=1,h7d
       triplesx(h1,h3,h2,p5,p6,p4)=triplesx(h1,h3,h2,p5,p6,p4)
     1   + t2sub(h7,p4,p5,h1)*v2sub(h3,h2,p6,h7)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 468 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 473 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 474 "./offl_ccsd_t_doubles_l_notransp.F"
# 474 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_1(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 483 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 490 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 491 "./offl_ccsd_t_doubles_l_notransp.F"
# 493 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'a'
# 495 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 501 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p5,p4)=triplesx(h3,h2,h1,p6,p5,p4)
     1  -t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 518 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 523 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 524 "./offl_ccsd_t_doubles_l_notransp.F"
# 524 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_2(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 533 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h1d,h3d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 540 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 541 "./offl_ccsd_t_doubles_l_notransp.F"
# 543 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'b'
# 545 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 551 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h3=1,h3d
      do h1=1,h1d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h1,h3,p6,p5,p4)=triplesx(h2,h1,h3,p6,p5,p4)
     1  -t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 568 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 573 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 574 "./offl_ccsd_t_doubles_l_notransp.F"
# 574 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_3(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 583 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p5d,p4d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 590 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 591 "./offl_ccsd_t_doubles_l_notransp.F"
# 593 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'c'
# 595 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 601 "./offl_ccsd_t_doubles_l_notransp.F"
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p5,p4)=triplesx(h2,h3,h1,p6,p5,p4)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 618 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 623 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 624 "./offl_ccsd_t_doubles_l_notransp.F"
# 624 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_4(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 633 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 640 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 641 "./offl_ccsd_t_doubles_l_notransp.F"
# 643 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'd'
# 645 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 651 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do p7=1,p7d
       triplesx(h3,h2,h1,p6,p4,p5)=triplesx(h3,h2,h1,p6,p4,p5)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 668 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 673 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 674 "./offl_ccsd_t_doubles_l_notransp.F"
# 674 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_5(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 683 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h1d,h3d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 690 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 691 "./offl_ccsd_t_doubles_l_notransp.F"
# 693 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'e'
# 695 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 701 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h1,h3,p6,p4,p5)=triplesx(h2,h1,h3,p6,p4,p5)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 718 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 723 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 724 "./offl_ccsd_t_doubles_l_notransp.F"
# 724 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_6(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 733 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p6d,p4d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 740 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 741 "./offl_ccsd_t_doubles_l_notransp.F"
# 743 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'f'
# 745 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 751 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h3,h1,p6,p4,p5)=triplesx(h2,h3,h1,p6,p4,p5)
     1    - t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 768 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 773 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 774 "./offl_ccsd_t_doubles_l_notransp.F"
# 774 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_7(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 783 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h3d,h2d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 790 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 791 "./offl_ccsd_t_doubles_l_notransp.F"
# 793 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'g'
# 795 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 801 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h2=1,h2d
      do h3=1,h3d
      do p7=1,p7d
       triplesx(h3,h2,h1,p4,p6,p5)=triplesx(h3,h2,h1,p4,p6,p5)
     1    - t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 818 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 823 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 824 "./offl_ccsd_t_doubles_l_notransp.F"
# 824 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_8(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 833 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h1d,h3d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 840 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 841 "./offl_ccsd_t_doubles_l_notransp.F"
# 843 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'h'
# 845 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p4,p5,p6,h2,h1,h3,p7)
!$omp&collapse(3) schedule(static,1) 
# 851 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h3=1,h3d
      do h1=1,h1d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h1,h3,p4,p6,p5)=triplesx(h2,h1,h3,p4,p6,p5)
     1   - t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 868 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 873 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 874 "./offl_ccsd_t_doubles_l_notransp.F"
# 874 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
c
      subroutine offl_ccsd_t_d2_9(h3d,h2d,h1d,p6d,p5d,p4d,
     1               p7d,
     2               triplesx,t2sub,v2sub,scratch,
     D     deltat)
# 883 "./offl_ccsd_t_doubles_l_notransp.F"
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d,p7d
      integer h3,h2,h1,p6,p5,p4,p7
      double precision triplesx(h2d,h3d,h1d,p4d,p6d,p5d)
      double precision t2sub(p7d,p4d,h1d,h2d)
      double precision v2sub(p7d,h3d,p6d,p5d)
      double precision scratch
# 890 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd2_top.fh"
C$Id$
      integer deltat
      double precision t0
# 891 "./offl_ccsd_t_doubles_l_notransp.F"
# 893 "./offl_ccsd_t_doubles_l_notransp.F"
      write (*, '(A)', advance="no") 'i'
# 895 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp target
!$omp teams distribute parallel do  private(p5,p6,p4,h1,h3,h2,p7)
!$omp&collapse(3) schedule(static,1) 
# 901 "./offl_ccsd_t_doubles_l_notransp.F"
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
      do h3=1,h3d
      do h2=1,h2d
      do p7=1,p7d
       triplesx(h2,h3,h1,p4,p6,p5)=triplesx(h2,h3,h1,p4,p6,p5)
     1   + t2sub(p7,p4,h1,h2)*v2sub(p7,h3,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
# 918 "./offl_ccsd_t_doubles_l_notransp.F"
!$omp end teams distribute parallel do 
!$omp end target
# 923 "./offl_ccsd_t_doubles_l_notransp.F"
# 1 "./sd_bottom.fh"
C$Id$
# 924 "./offl_ccsd_t_doubles_l_notransp.F"
# 924 "./offl_ccsd_t_doubles_l_notransp.F"
      return
      end
# 2270 "offl_ccsd_t_doubles_l.F"
