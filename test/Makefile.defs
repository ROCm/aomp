ifeq ($(AOMP),)
# --- Standard Makefile check for AOMP installation ---
ifeq ("$(wildcard $(AOMP))","")
  ifneq ($(AOMP),)
    $(warning AOMP not found at $(AOMP))
  endif
  AOMP = $(HOME)/rocm/aomp
  ifeq ("$(wildcard $(AOMP))","")
    $(warning AOMP not found at $(AOMP))
    AOMP = /usr/lib/aomp
    ifeq ("$(wildcard $(AOMP))","")
      $(warning AOMP not found at $(AOMP))
      $(error Please install AOMP or correctly set env-var AOMP)
    endif
  endif
endif
# --- End Standard Makefile check for AOMP installation ---
endif

ifneq ($(TIMEOUT),)
  TKILL= timeout $(TIMEOUT)
endif

UNAMEP = $(shell uname -m)
ifeq ($(UNAMEP),ppc64le)
  AOMP_CPUTARGET = -target ppc64le-linux-gnu GREG
endif

ifeq ($(EPSDB),1)
AOMPHIP ?= $(AOMP)/..
else
 PFILE = $(AOMP)/lib/libamdhip64.so
 ifneq ("$(wildcard $(PFILE))","")
   AOMPHIP ?= $(AOMP)
 else
   AOMPHIP = $(AOMP)/..
 endif
endif

# If AOMP env variable contains opt use rocm_agent_enumerator for device id.
ifeq (opt,$(findstring opt,$(AOMP)))
  INSTALLED_GPU  = $(shell $(AOMP)/../bin/rocm_agent_enumerator | grep -m 1 -E gfx[^0]{1}.{2})
else
   # If AOMP not pointing to rocm, then assume neither offload-arch nor mygpu utilities exist.
   # So use lspci to search for volta and if not then use standalone rocm_agent_enumerator
   # to autodetect which GPU is active.
   ifneq ("$(wildcard /usr/sbin/lspci)","")
     lspci_loc = /usr/sbin/lspci
   else
     lspci_loc = /usr/bin/lspci
   endif
   ISVOLTA = $(shell $(lspci_loc) -n | grep 10de:1db4)
   ifeq (10de,$(findstring 10de,$(ISVOLTA)))
      INSTALLED_GPU = sm_70
   else
      INSTALLED_GPU = $(shell $(AOMP)/bin/rocm_agent_enumerator | grep -m 1 -E gfx[^0]{1}.{2})
  endif
endif

AOMP_GPU       ?= $(INSTALLED_GPU)
CC              = $(AOMP)/bin/clang
CUDA           ?= /usr/local/cuda

ifeq (sm_,$(findstring sm_,$(AOMP_GPU)))
  AOMP_GPUTARGET = nvptx64
else
  AOMP_GPUTARGET = amdgcn-amd-amdhsa
endif

ifeq (gfx10,$(findstring gfx10,$(AOMP_GPU)))
 AOMP_WSIZE = -DWAVE_SIZE=32
endif

ifeq ($(TARGET),)
  ifeq ($(OMP_HOST),)
   ifeq ($(USE_OFFLOAD_ARCH),1)
    TARGET  =  --offload-arch=$(AOMP_GPU)$(AOMP_TARGET_FEATURES)
   else
    TARGET  =  -fopenmp-targets=$(AOMP_GPUTARGET) -Xopenmp-target=$(AOMP_GPUTARGET) -march=$(AOMP_GPU)
   endif
  endif
endif

# OFFLOAD_DEBUG is used by this test harnass to turn on HOST and/or DEVICE level debug
ifeq ($(OFFLOAD_DEBUG),1)
  $(info    DEBUG Mode ON)
  SET_DEVICE_DEBUG =  LIBOMPTARGET_DEBUG=1
  SETENV  = env LIBRARY_PATH=$(AOMP)/lib-debug
endif
ifeq ($(OFFLOAD_DEBUG),2)
  $(info    DEBUG Mode ON)
  SET_DEVICE_DEBUG = LIBOMPTARGET_DEVICE_RTL_DEBUG=-1
  SETENV  = env LIBRARY_PATH=$(AOMP)/lib-debug
endif
ifeq ($(OFFLOAD_DEBUG),3)
  $(info    DEBUG Mode ON)
  SET_DEVICE_DEBUG = LIBOMPTARGET_DEBUG=1 LIBOMPTARGET_DEVICE_RTL_DEBUG=-1
  SETENV  = env LIBRARY_PATH=$(AOMP)/lib-debug
endif
ifeq ($(OFFLOAD_DEBUG),4)
  $(info    DEBUG Mode ON)
  SET_DEVICE_DEBUG = ATMI_DEBUG=1
  SETENV  = env LIBRARY_PATH=$(AOMP)/lib-debug
endif
ifeq ($(OFFLOAD_DEBUG),5)
  $(info    DEBUG Mode ON)
  SET_DEVICE_DEBUG = ATMI_DEBUG=1 LIBOMPTARGET_DEBUG=1 LIBOMPTARGET_DEVICE_RTL_DEBUG=-1
  SETENV  = env LIBRARY_PATH=$(AOMP)/lib-debug
endif

ifeq ($(OMP_FLAGS),)
    ifeq ($(OMP_HOST),)
      OMP_FLAGS = $(AOMP_CPUTARGET) $(AOMP_WSIZE) -fopenmp $(TARGET)
    else
      OMP_FLAGS = $(AOMP_CPUTARGET) $(AOMP_WSIZE) -fopenmp
    endif
endif
OMP_FLAGS += $(EXTRA_OMP_FLAGS)

ifeq ($(VERBOSE),1)
  $(info    Compilation and linking VERBOSE Mode ON)
  VERBOSE = -v
endif

ifeq ($(TEMPS),1)
  $(info    Compilation and linking save-temp Mode ON)
  VERBOSE += -save-temps 
endif

ifeq ($(NOOPT),1)
CFLAGS =
else
CFLAGS = -O2
endif

ifeq (sm_,$(findstring sm_,$(AOMP_GPU)))
LINK_FLAGS = -L$(CUDA)/targets/$(UNAMEP)-linux/lib -lcudart
else
LINK_FLAGS =
endif
LINK_FLAGS += $(EXTRA_LDFLAGS)

RUNPROF =  $(CUDA)/bin/nvprof 
RUNPROF =

ifeq ($(SET_DEVICE_DEBUG),)
   RUNENV = $(TKILL)
else
   RUNENV = env $(SET_DEVICE_DEBUG) $(TKILL)
endif

