#!/bin/bash
#
#  repo_forall_cmds:  a set of commands called from repo forall -c repo_forall_cmds 
#  
#  usage:
#  repobindir=$AOMP_REPOS/.bin
#  thisdir=$AOMP_REPOS/aomp/bin
#  $repobindir/repo forall -g revlocked -c $thisdir/repo_forall_cmds list
# 

function get_monthnumber() {
    case $(echo ${1:0:3} | tr '[a-z]' '[A-Z]') in
        JAN) monthnumber="01" ;;
        FEB) monthnumber="02" ;;
        MAR) monthnumber="03" ;;
        APR) monthnumber="04" ;;
        MAY) monthnumber="05" ;;
        JUN) monthnumber="06" ;;
        JUL) monthnumber="07" ;;
        AUG) monthnumber="08" ;;
        SEP) monthnumber="09" ;;
        OCT) monthnumber="10" ;;
        NOV) monthnumber="11" ;;
        DEC) monthnumber="12" ;;
    esac
}

function find_newer_branches() {
   commit=`git log -1 | grep "^commit" | cut -d" " -f2 | xargs`
   thisdate=`git log -1 --pretty=fuller | grep "^CommitDate:" | cut -d":" -f2- | xargs | cut -d" " -f2- | cut -d"-" -f1`
   thisauthor=`git log -1 --pretty=fuller | grep "^Commit:" | cut -d":" -f2- | cut -d"<" -f1 | xargs`
   get_monthnumber $thisdate
   thisday=`echo $thisdate | cut -d" " -f2`
   thisyear=`echo $thisdate | cut -d" " -f4`
   thisbranch="${REPO_REMOTE}/$REPO_RREV"
   printf -v thisdatevar "%4u-%2s-%02u" $thisyear $monthnumber $thisday
   echo
   echo "DIRNAME:$REPO_PATH  PROJECT:$REPO_PROJECT "
   echo "current:$thisdatevar commit:${commit:0:8}  branch:$thisbranch  author:$thisauthor"

   tmpfile=/tmp/xzf$$
   # This would make search faster by filtering for only amd , roc, or aomp branches
   #git branch -r -v  | grep -i "\/amd\|\/roc\|\/aomp\|\/dev" >$tmpfile
   git branch -r -v >$tmpfile
   while read curline ; do
      branch=`echo $curline | cut -d" " -f1 | xargs`
      shortcommit=`echo $curline | cut -d" " -f2`
      if [[ "$shortcommit" != "->" ]] ; then
        author=`git show $shortcommit | grep "^Author:" | cut -d":" -f2- | cut -d"<" -f1 | xargs`
        branchdate=`git show $shortcommit | grep "^Date:" | cut -d":" -f2- | xargs | cut -d" " -f2- | cut -d"-" -f1 `
        get_monthnumber $branchdate
        branchday=`echo $branchdate | cut -d" " -f2`
        branchyear=`echo $branchdate | cut -d" " -f4`
        printf -v datevar "%4u-%2s-%02u" $branchyear $monthnumber $branchday
        if [[ $datevar > $thisdatevar ]] ; then
           echo "  newer:$datevar commit:$shortcommit  branch:$branch  author:$author"
        fi
        if [[ $datevar == $thisdatevar ]] ; then
           if [[ $branch != $thisbranch ]] ; then
              echo "   same:$datevar commit:$shortcommit  branch:$branch  author:$author"
           fi
        fi
      fi
   done < $tmpfile
   rm $tmpfile
}

function list_repo(){
   logcommit=`git log -1 | grep "^commit" | cut -d" " -f2 | xargs`
   thiscommit=${logcommit:0:12}
   thisdate=`git log -1 --pretty=fuller | grep "^CommitDate:" | cut -d":" -f2- | xargs | cut -d" " -f2-`
   get_monthnumber $thisdate
   thisday=`echo $thisdate | cut -d" " -f2`
   thisyear=`echo $thisdate | cut -d" " -f4`
   printf -v thisdatevar "%4u-%2s-%02u" $thisyear $monthnumber $thisday
   author=`git log -1 --pretty=fuller | grep "^Commit:" | cut -d":" -f2- | cut -d"<" -f1 | xargs`
   repodirname=$REPO_PATH
   HASH=`git log -1 --numstat --format="%h" | head -1`
   is_hash=0
   branch_name=${REPO_RREV}
   # get the actual branch
   actual_branch=`git branch | awk '/\*/ { print $2; }'`
   rc=0
   if [ "$actual_branch" == "(no" ] || [ "$actual_branch" == "(HEAD" ] ; then
      is_hash=1
      actual_hash=`git branch | awk '/\*/ { print $5; }' | cut -d")" -f1`
      if [ "$actual_hash" != "$HASH" ] ; then
	  rc=1
      fi
   fi
   if [ "$branch_name" != "$actual_branch" ] && [ $is_hash == 0 ] ; then
      rc=2
   fi
   if [ $rc == 1 ] ; then 
      printf "%24s %20s %12s %10s %26s %20s %8s\n" $actual_hash $REPO_PATH $thiscommit $thisdatevar ${REPO_PROJECT} "$author" "!BADHASH!"
   elif [ $is_hash  == 1 ] ; then 
      printf "%24s %20s %12s %10s %26s %20s\n" $actual_hash $REPO_PATH $thiscommit $thisdatevar ${REPO_PROJECT} "$author"
   elif [ $rc == 2 ] ; then 
      printf "%24s %20s %12s %10s %26s %20s %8s\n" $actual_branch $REPO_PATH $thiscommit $thisdatevar ${REPO_PROJECT} "$author" "!BRANCH!"
   else
      manifest_branch="${REPO_REMOTE}/${REPO_RREV:0:12}"
      printf "%24s %20s %12s %10s %26s %20s\n" $manifest_branch $REPO_PATH $thiscommit $thisdatevar ${REPO_PROJECT} "$author"
   fi
}

# Main program starts here
repocmd=$1
if [ -Z $repocmd ] ; then 
   echo "ERROR:  $0 requires one argument with name of subcommand to run"
   exit 1
fi

rc=0
if [[ "$repocmd" == "gitcheckout" ]] ; then
    echo git checkout $REPO_RREV
    git checkout $REPO_RREV
elif [[ "$repocmd" == "find_newer_branches" ]] ; then
    find_newer_branches
elif [[ "$repocmd" == "list" ]] ; then
    list_repo
else
    echo "ERROR: Bad subcommand for $0"
    echo "       repocmd=$repocmd"
    rc=1
fi

exit $rc
