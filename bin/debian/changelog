aomp (16.0-2) UNRELEASED; urgency=medium

  * Initial release of aomp is 0.3-2
  *   Please see example in /usr/lib/aomp/examples/vmuldemo 
  *   aomp requires amdllvm, amdlibgcn, cuda, and libatmi
  * 0.3-3 Fixes data sharing constructs, include SOURCE ID in commandline
  *   updates to libcuda2gcn.bc 
  * 0.3-6 Major updates to support OpenMP 4.5
  *   now with ROCm 1.6
  *   This is now a single compiler, no need for amdllvm. 
  * 0.3-7 cloc.sh is now part of aomp. See examples/cloc . 
  *   Important fix for the simd example
  *   Change max teams limit to 128 for amdgcn
  *   Minor driver fix so -c -S -emit-llvm only does a single pass
  *   Added clang-fixup-fatbin tool to allow gcn images in fatbin
  * 0.3-8 support for target regions that span mulitple source files
  *   fixed compiler abort message to open issue on aomp
  * 0.3-9 fix atomics used to write to print buffer
  *   new atmi device library 
  *   set-linkage moved to bin for building bc libs
  *   new GFXLIST added to build environment to help developers minimize build time
  *   support for cuda9
  * 0.4-0 is a major upgrade
  *   Merge yorktown coral CLANG 4.0 compiler as of Nov 15, 2017 
  *     This provides significant enhancements for synthesized GPU kernels. 
  *   Support for optimized libomptarget bc libraries for multiple nvptx subarchs 
  *   Support for cudaclang for both nvidia and amdgcn targets
  *   specification of the target on command line changed to -march=
  *     This may change again in the future
  *   autodetect the target of the current machine with the mygpu script
  *   all smoke tests now run for both nvidia and amdgcn targets. 
  *     stream test still does not vectorize
  *   Stop using release branches in our github.  We now use github release mechanism
  *     and attach deb and rpm files to the release
  *   Tasklist is currently managed in aomp/aomp/bin/TODOs. 
  *   Testing removed from "examples" directory into test/smoke directories. 
  *   Added test/omptests directory for enhanced testing. 
  * 0.5-0 is a major upgrade
  *   This clang 7.0 is a large patch to support OpenMP on amdgcn.  
  *   Patch is against the clang and openmp development trunks as of 
  *   July 18 2018
  * 0.5-1 
  *   Cleanup the atmi-staging repo
  *   Fix smoke tests vmulsum and assertok_error caused by missing smid function for amdgcn
  *   Fixed the cuda toolchain to pickup includes from the compiler install first. 
  * 0.5-2 
  *   Fix all smoke tests except reduce and issue_apps_001
  *   The __AMDGCN__ compiler macro now provides the gfx number
  *   The bug message now points to the correct URL to report bugs. 
  *   Started an initial list of limitations
  *   Includes llvm/clang/openmp/lld trunk updates up to Aug 8, 2018. 
  *      We are now at llvm/clang 8.0.0 
  * 0.5-3 
  *   Lower the thread_limit to 512 for amdgcn. Can still have many teams.
  *   Created a new kernel launch trace option with envvar LIBOMPTARGET_KERNEL_DEBUG
  *   Cleaned up some compilation warnings in the build of openmp libraries
  *   Removed c++ delete functions from the libomptarget device runtime.
  *     Destructors should not be generated on the device pass. 
  *   Now building AOMP with a public available version of ATMI.
  *   Add addrspace cast in emitGenericVarsProlog because some of the captured 
  *     variables may be from a kernel arg in address space 1, so we need to cast 
  *     to generic.  This fixes some of the OPenMP Proxy apps.
  *   Fix driver error when extra libs are specified on the command line such as -lm. 
  *     Now applications that need standard host libraries should run.
  *   Cleaned up example openmp makefiles and the README for openmp examples.
  *   Fixed the unbundle.sh script to work with amdgcn .o files. 
  * 
  * 0.5-4
  *   Support user-definable libdevice libraries (DBCLs) with -l option.
  *     The use of this option is consistent with host library management.
  *     See the file examples/libdevice/README.md for more info.    
  *   Provide libm as an example DBCL which provide platform specific math functions.  
  *   Remove all definitions of math functions from header files that were borrowed 
  *     from cuda or hip. To use math functions, you must now use -lm command line
  *     options. Also include the same math headers <cmath> or math.h as host.
  *     The -lm option will cause the driver to search for a libm bc file, DBCL
  *     to lllvm-link the generated LLVM IR.  The search algorithm is consistent
  *     with host library search.  
  *   There is a new simple auto-include in clang Headers called 
  *     __clang_openmp_runtime_wrapper.h
  *     This auto-include does not define built-in functions for every compile
  *     like cuda and hip.  Its primary purpose is to turn off host optimizations
  *      in standard system header files.  
  *   Add C++ openmp example
  *   Start using the environment variable AOMP_GPU in example makefiles showing
  *     we can easily switch from amdgcn to nvptx.  For example, change AOMP_GPU
  *     from gfx803 to sm_30.
  *   Change mymcpu and mygpu to lookup pci identifiers from a reformated and
  *      filtered cache of the pci.ids file.
  *   Fixed ATMI to avoid use of CPU resources for large CPU core machines.
  *   Fix printf to work with string arguments including variable string args.
  *   Add a kernel trace feature that does not require debug libraries.  
  *      Set LIBOMPTARGET_KERNEL_TRACE=1  to see the kernel trace.
  *   Temporarily do not provide debug versions of libomptarget device libraries
  *     for amdgcn.  Link to release versions of these libraries to support
  *     use of debug runtime libraries. 
  *   Temporary solution for device archive libraries whose members are bundles.
  *     This only works for  single device time archive files. 
  * 0.5-5
  *   Same as 0.5-4 but built for ROCm 1.9
  *   AOMP now includes both roct (thunk libraries) and rocr (ROCm runtime). 
  *   Cleanup and additional automation of the source build process. 
  *   
  * 0.6-0 
  *   Renamed from HCC2 to AOMP. 
  *   Device libraries now stored flat in lib/libdevice directory. 
  *   Massive cleanup of build scripts, 
  *   Default install is now $HOME/rocm/aomp.
  *   All rocm dll references are now use absolute rpath and within the aomp 
  *      installation to avoid testing many rocm releases. So there are no
  *      rocm dependencies for aomp. aomp contains roct and rocr versions 1.9. 
  *   hcc is now a build component because build_hip.sh requires hcc to 
  *      compile hip runtime. Only the necessary libraries are preserved
  *      in the package to save space
  *   Moved all ROCm component dependencies to branch 2.1.x
  *   Now requires cuda 10 to build from source.
  * 
  * 0.6-1
  *   Disabled SILoadStoreOptimizer pass to work around 64 bit address calculation issue
  *   Added 6 new device APIs as extentions to OpenMP device apis
  *      omp_ext_get_warp_id
  *      omp_ext_get_lane_id
  *      omp_ext_get_master_thread_id
  *      omp_ext_get_smid
  *      omp_ext_is_spmd_mode
  *      omp_ext_get_active_threads_mask
  *   rtl get_launch_vals added, rewrite algorithm for threads,teams computation
  *   throttle code for teams and threads off by default, enabled with THREAD_TEAM_THROTTLE
  *   Add support for an LLC and OPT specific env-var AOMP_LLC_ARGS AOMP_OPT_ARGS
  *      Which allows adding compiler options to opt and llc via env-var, useful for triage, dumps, and debug.
  *   Added clang-unbundle-archive tool.
  *   Added support for device library archives in clang when using -l flag.
  *   Updated llvm-link to work with archives of .bc components
  *   Added new method AddStaticDeviceLibs to CommonArgs.cpp that searches for static device libs using -l flag
  *     in a way similar to search method for host libraries with added feature of searching for
  *     names that specify the architecture and/or GPU.
  *   Cleanup of aomp build scripts including split of llvm component into llvm, clang, and lld.
  *     Fix where llvm-config is found during build
  *     Added installed binaries from llvm to help with clang lit testing
  *     New build script for comgr.  This is not part of the compiler build yet. Developers and
  *     those building from source can run build_comgr.sh
  *     Do not build hip runtime for ppc and arm builds.
  *  Added two new smoke tests and improved automation of smoke tests
  *  Corrected mymcpu and mygpu for vega20
  *
  * 0.6-2
  *   Fixed issue with constant size teams and threads.
  *   Moved to the stable clang/llvm 8.0 code base
  *   Fixed code in deviceRTLs/amdgcn that set Max_Warp_Number to 16, was 64
  *   Enable Float16 for 0.6-2, disabled by default in release_80 merge
  *   Disable META data opt, and provide evar AMDGPU_ENABLE_META_OPT_BUG to enable
  *   Add archive handling for bc linking.
  *   For performance, rewrite select_outline_wrapper calls, to be direct calls.
  *    Example:  change the generated from:
  *       @_HASHW_DeclareSharedMemory_cpp__omp_outlined___wrapper =
  *          local_unnamed_addr addrspace(4) constant i64 -4874776124079246075
  *     call void @select_outline_wrapper(i16 0, i32 %6, i64 -4874776124079246075)
  *     to:
  *        call void @DeclareSharedMemory_cpp__omp_outlined___wrapper(i16 0, i32 %6)
  *  In release_80, Loop_tripcount API is now used, so we need to limit num_groups/teams
  *     to no more than Max_Teams, fixes assertok_error, and snap4
  *     Also handle num_teams clause inside loop_tripcount logic.
  *  BALLOT_SYNC macro replaced with ACTIVEMASK in release_80
  *
  * 0.6-3
  *   New support for synchronous services called hostcall.
  *   The source to support hostcall can be found in a new repository called aomp-extras in hostcall directory
  *   There are minor changes to atmi to support hostcall. These are in branch atmi-0.5-063.
  *   Removed printf end-of-kernel service and added to hostcall. printf is now much more reliable from the gpu.
  *   Enhancements to toolchain to support static device libraries
  *   Fix to correctly pickup math functions from libm-.bc.
  *     Previously it was seeing math functions as builtins.
  *   Suppress calls to __kmpc_push_target_count for host code, resolves undefined reference.
  *   Allow -frtti flag to be honored if user requests it on command line.
  *   Add AOMP/include path before /usr/local/include to pick up correct header for omp.h.
  *   Generate Metadata for both SPMD and Generic offload targets.
  *   Honor OMP_TEAM_LIMIT for work groups, just like OMP_NUM_TEAMS.
  *   Added *_wg_size symbol to reflect compile time known thread limit for a kernel.
  *   Added support to openmp runtimes to support 1024 threads per team/work group.
  *   Reenabled SILoadStoreOptimizer pass after pulling upstream fix for scalar carry corruption.
  * 
  * 0.6-4
  *   support for building from source on SLES15 SP1
  *   Generate new  rpm package for SLES15 SP1
  *   Do not create a host thread for GPU hostcall services if no services are
  *       used by any kernel in the application. This fixes a performance
  *       regression we saw with openmpapps in 0.6-3 because none of those
  *       apps currently use printf on the device. This still needs more study.
  *   Reorganized the github README and linked pages to make it less confusing
  *       and to ready support for more platforms.
  *   Removed hip wrapper scripts such as hipcc. Users must compile hip with
  *        clang++ as demonstrated in examples to get openmp support with hip.
  *   Properly set amdgpu-flat-work-group-size for generic mode: add wave_size
  *   Add -lelf to link step of libomptarget.rtl.hsa.so
  *   More gracefully exit when gpu arch of kernel does not match device arch
  *   Refine LIBPOMPTARGET_KERNEL_TRACE 1=>minimal, 2=>verbos'er
  *   More pervasive use of mygpu in the examples to identify the proper gfx
  *       or sm identifier. 
  *
  * 0.6-5
  *   Added support for archives of bundles on command line.
  *   Created hostcall payload on system memory instead of GPU memory. This avoids
  *       cache effects of HBM memory that gets flushed only at kernel boundaries.
  *   Cleaned up examples.
  *   Readability changes to various README files in docs.
  *   Added SLES-15-SP1 source install dependencies and important notes for linux support.
  *   Emit struct of per kernal attributes.
  *   Detect and warn that a target exit data clause fails, rather than abort.
  *   Fixed linking issue when archive files contain no BC files.
  * 
  * 0.7-0
  *   Now installs in /usr/lib/aomp_0.7-X with sympbol link from /usr/lib/aomp
  *   Based of clang/llvm trunk 9.0 as of July 15, 2019
  *   Uses native build of rocm-device-libs from rocm 2.6
  *   New untested infrastructure to eventually support fortran with flang
  *   Moved to the new monorepo llvm-project.  This eliminates need for
  *      clang,llvm,lld, and openmp repositories. 
  *   no longer build for nvptx backend, removed cuda examples
  *   moved utils to aomp-extras repository
  *   moved custom libraries from rocm-device-libs to aomp-device-libs
  *   hcc now build with rocm 2.6.x
  *   roct and rocr are now build from rocm 2.6.x sources
  *   fixes for a number of new test cases
  *
  * 0.7-1
  *   move to rocm 2.7.x sources
  *   fix hip issues and add hipcc and other hip scripts
  *   Added rocminfo utils to support hipcc and hipconfig
  *   Improvements to the amdgcn deviceRTLs to support common GPU deviceRTL
  *   Added logic to use the FileID and LineNum of parent file (the includer)
  *      instead of the include file where the target region is located.
  *      This avoids creating symbols with the same name when including a
  *      header file that has a c++ template with a target region.
  *   For OpenMP+HIP, hip will be on when processing host bc, so clang must
  *      be told this is IR and not HIP input.
  *   Fixed the HIP toolchain so that the custom linker tool build-select
  *      is not called for hip applications. It is only called for openmp.
  *      This fixes problem where kernels are not seen when multiple source
  *      files are specified.
  *   Cleaned up some things to lessen the patch from upstream HIP.cpp
  *   Added the hip header hip_host_runtime_api.h to clang/lib/Headers to
  *      avoid modifications to the hip repository.
  *   Check if an archive contains device code for AMDGCN.
  *   Cleanup deviceRTL for amdgcn to prepare for common GPU deviceRTL
  *   Defer issue with reductions till 0.7-2.
  *
  * 0.7-2
  *   Fixed reduction not showing correct value on device. This was due to a full
  *      work group/block barrier being called by the worker threads which threw off
  *      synchronization between master warp and worker warps.
  *   Fixed compilation errors on AOMP cloc examples
  *
  * 0.7-3
  *   Fix issue with user barrier in code causing master wavefront to unintentionally wake up and continue
  *   Removed amdgcn_wave_barrier from named_sync and replace with amdgcn_s_barrier
  *
  * 0.7-4
  *   lld linkstep producing hsaco will emit errors if undefined symbols are
  *       detected in the final image.
  *   Removed hip automatic mode. Removes need for lib/Headers/cuda-open.
  *   Added aompExtractRegion script which will disassemble the amd gpu kernel.
  *   Fixes for having a barrier in sequential part of code region which is
  *      handled by the master warp. The fix extends the "barrier handshaking"
  *      between the master warp and worker warps. These 5 new deviceRTL
  *      functinos begin with __kmpc_amd_*. Only amdgcn uses these because
  *      nvptx uses a partial hardware barrier not availale in amdgcn.
  *      Ultimately, named_sync should never be called by amdgcn.
  *   Fix for reduction across teams.
  *   Fix for hip detecting wrong version of code object, done with patch
  *      before build
  *   Fix so rocminfo command finds the correct version of libhsa-runtime64.so
  *   Fix to device math library in aomp extras
  *   Fix cloc.sh to support .cu files without hip automatic mode
  *
  * 0.7-5
  *   Move to ROCm 2.9 sources
  *   Updates to source build scripts to allow consistent patching to pristine ROCm source repositories.
  *   The comgr is now patched to use the old method of getting section name for llvm-9.  The current
  *      comgr code assumes llvm-10 so it needed this patch until aomp moves to llvm-10.
  *   Backported clang support for f16 in builtins. This was needed to build ROCM 2.9 rocm-device-libs.
  *   Simplify hostcall detection
  *   Import non functional changes to deviceRTL from llvm master
  *   libm SDL now added automatically by default
  *   Added libm to the do not search for SDL list when linking user specified libraries during the
  *      clang-build-select-link step. This prevents a double linking of the device libm when -lm is used.
  *   Split aomp test repositories to a separate directory.
  *   Starting with this release, we will create an artifact tarball of the entire source tree.
  *      This tree includes a Makefile in the root directory used to build aomp from the release tarball.
  *      You can use spack to build AOMP from this source tarball.
  *   Instructions on the use of spack to build AOMP have been added to the install documentation.
  *   Fixed HIP_DEVICE_COMPILE being active during host pass
  *   Added RAJA example
  *   Added initial -g (debug) support for target code. Can be used with the soon to be released rocm-gdb.
  *   The upstream flang source code as of Oct 23, 2019 has been merged into this build. Some minor fixes
  *      were required.  See the commits in AOMP-191023.
  *   Added sollve_vv to the aomp-test repositories and a script called run_sollve.sh that patches
  *      the Makefile to skip fortran tests and patches bad tests that have map clauses for reduction variables.
  * 
  * 0.7-6
  *   Support for ppc64le
  *   compiler-rt runtime now included in build
  *   Switch to ROCm source for ROCM 3.0.
  *   Build and install llvm component compiler-rt.
  *   Created ppc64le debian package for ubuntu 1804
  *   Fixed examples and tests to work for any CPU type by using "uname -p" command.
  *   Added verification enhancements for openmpapps
  *   Added changes from rocmaster into master branch
  *   Increased default number of loaded kernels to 32 from 8, before needing env-var ATMI_MAX_KERNEL_TYPES=nnn
  *       to increase
  *   Allow map on reduction if -fopenmp-version=50
  *   Fortran target compiles add AOMP/include dir for module searches
  *   Modified nested parallel to not use SafeMalloc and instead preallocate loop context memory.
  *   Minor header changes in cloc.sh
  *   Adjusted raja_build.sh to avoid use of indirect function calls
  *   Added \$ORIGIN to cmake rpath install in build scripts
  *   Added new patch system to allow for unmodified repos after build is complete
  *   Added support for gfx908
  * 
  * 11.0-1
  *   These are the major changes in this release
  *
  *   Rebase to LLVM 11 development trunk as the code base.
  *   Switch from hip runtime built with hcc to new hip runtime built on top of ROCMclr.
  *   
  *   Known issues
  *
  *   aompExtractRegion is not able to process executables built with this release due to the change
  *       in how offloaded images are embedded in the executable. Should be fixed in next release.
  *   Issue #89 Linker error (The file was not recognized as a valid object file) when trying to
  *       link archive file on command line
  *   Issue #92 hipcc fails when AOMP is not installed in /usr/lib/aomp
  *
  * 11.5-0
  *  Start using month in the release number consistent with ROCM numbering.
  *        However the version will continue to use the LLVM version number.
  *  Merge a fork of atmi and hostcall into the libomptarget hsa plugin. This removes
  *        dependencies on these two external components and allows us to streamline the code
  *        for the openmp device plugin. Merging this code caused the trunk delta to go up significantly
  *        as we prepare to submit this plugin upstream.
  *  Improved solvv coverage 9/201 fails, 95% passing rate on amdgcn
  *  AOMP supports -g compilation of C/C++ codes and will allow on target debugging. This is initial functionality.
  *  Hipcc now uses AOMP env variable to support installs not located in /usr/lib/aomp
  *
  * 11.6-1
  *   Upgraded to ROCm 3.5 HIP/ROCclr
  *   Upgraded ROCt ROCr to 3.5 sources
  *
  * 11.6-2
  *   Enabled OpenMP 5.0 by default, use -fopenmp-version=45 to enable OpenMP 4.5 compliance.
  *   Restructuring to prepare for upstream and inclusion to ROCm compiler.
  *   Fix issue #114 fix bitcode search path using hip policy HIP_DEVICE_LIB_PATH and hip-device-lib
  *        command line option.
  *   Turn on global_free for kmpc_impl_free.
  *   Significant cleanup and restructuring of hostrpc including:
  *        -Get rid of hostcall register functions. Replace with handlePayload(service, payload).
  *          handlPayload has a simple switch to call the correct service handler function.
  *        -Get rid of WITH_HSA macro. It is always on.
  *        -Move the hostrpc stubs and host fallback functions into a single library and include file.
  *        -It also makes the stubs openmp cpp source instead of hip and reorganizes everything in the directory
  *         openmp/libomptarget/hostrpc.
  *        -Move hostrpc_invoke.cl into DeviceRTLs/amdgcn because it is arch specific.
  *        -Generalize the vargs processing in printf to work for any vargs function that we want
  *         to execute on the host, including a vargs function that uses a function pointer.
  *        -Reorganize files, add global_allocate and global_free, and fix some compile warnings.
  *        -Fix llvm TypeID enum to match current upstream llvm TypeID.
  *   Moved strlen_max function inside the declare target #ifdef _DEVICE_GPU in hostrpc.cpp to resolve linker
  *         failure seen in pfspecifier_str smoke test.
  *   Fixed AOMP_GIT_CHECK_BRANCH in aomp_common_vars to not block builds in Red Hat if repo is on a specific commit hash.
  *
  * 11.7-0
  * Merge of trunk as of July 2nd.
  * Dropped support for 16.04.
  *
  * Known Issues:
  *        -Hip example device_lib fails to compile   *
  *
  * 11.7-1
  *   Inclusion of OMPD support which is not yet upstream
  *   Build of ROCgdb
  *   Host runtime optimisation. GPU image information is now mostly read on the
  *         host instead of from the GPU.
  *   Fixed the source build scripts so that building from the source tarball does not fail
  *         because of missing test directories. This fixes issue #116.
  *
  * Known Issues:
  *        -Hip example device_lib fails to compile
  *
  *
  * 11.8-0
  *   Switch to the LLVM 11.x stable code base.
  *   OMPD updates for flang.
  *   To support debugging OpenMP, selected OpenMP runtime sources are included in
  *         lib-debug/src/openmp.  The ROCgdb debugger will find these automatically.
  *   Threadsafe hsa plugin for libomptarget.
  *   Updates to support device libraries.
  *   Openmpi configure issue with real16 resolved.
  *   DeviceRTL memory use is now independent of number of openmp binaries.
  *   Startup latency on first kernel launch reduced by order of magnitude. 
  *
  *   These are the known issues with this release:
  *   Further reductions in memory use by DeviceRTL required
  *
  * 11.9-0
  *   Fix compiler warnings for build_project.sh and build_openmp.sh
  *   Fix: [AOMP] [flang] The AOMP 11.7-1 Fortran compiler claims to support
  *         the -isystem flag, but ignores it.
  *   Fix: [AOMP] [flang] producing internal compiler error when character
  *         is used with KIND
  *   Fixes [flang] openmp map clause on complex allocatable expressions !$omp
  *         target data map( chunk%tiles(1)%field%density0)
  *   DeviceRTL memory footprint has been reduced from ~2.3GB to ~770MB for
  *   AMDGCN target.
  *   Switch sources to ROCm 3.7.x branches
  *   Fixed hash for raja to avoid build error in example
  *   Workaround for red_bug_51 failing on gfx908.
  *   Switch to python3 for ompd and rocgdb.
  *   ROCdbgapi requires g++7 as a minimum
  *   Ubuntu 16.04 build does not have the rocgdb debugger as the system only supports g++5.
  *
  * Known Issues
  *   -ROCgdb does not work on gfx803
  *   -Barrier issue on gfx803 for generic kernels.
  *
  * 11.9-1
  *   Merge with stable LLVM 11
  *   Switch sources to ROCm 3.8.x branches, ROCr remained on 3.7.x as there
  *         were no source updates put in 3.8.
  *   Fixes for ompt lit tests  * 
  *
  * Known Issues
  *   Race condition in the build of hostrpc in openmp, which may result in an 
  *         empty libhostrpc.a. Rerun build_openmp.sh.
  *   ROCgdb does not work on gfx803.
  *   Barrier issue on gfx803 for generic kernels.
  *
  * 11.11-0
  * Major fixes to internal clang math headers:
  *   This set of changes applies to clang internal headers to support OpenMP C, C++,
  *         and FORTRAN and for HIP C.  This establishes consistency between NVPTX and AMDGCN
  *         offloading and between OpenMP, HIP, and CUDA.  OpenMP uses function variants and header
  *         overlays to define device versions of functions.  This causes clang LLVM IR codegen to
  *         mangled names of variants in both the definition and callsites of functions defined in
  *         the internal clang headers.  These changes apply to headers found in the installation
  *         subdirectory lib/clang/11.0.0/include.
  *   These changes temporarily eliminates the use of the libm bitcode libraries for C and C++.
  *         Although math functions are now defined with internal clang  headers, a bitcode library
  *         of the C functions defined in the headers is still built for FORTRAN toolchain linking
  *         because FORTRAN cannot use c math headers.  This bitcode library is installed in
  *         lib/libdevice/libm-<device arch>.bc.  The source build of this bitcode library is done
  *         with the aomp-extras repository and the component built script build_extras.sh.
  *         In the future, we will introduce across the board changes to eliminate massive header files
  *         for math libraries and replace it with linking to bitcode libraries.
  * Usability updates:
  *   Add support for -gpubnames in Flang Driver
  * Performance updates:
  *   Runtime performance improvements for synchronous memory copy between host and device.
  *   Added a performant  "integer to integer" pow function for c++ that does not convert to float.
  * Bug fixes:
  *   Fixed hostrpc cmake race condition in the build of openmp
  *   Add a fatal error if missing -Xopenmp-target or -march options when -fopenmp-targets is specified.
  *         However, we do forgive this requirement for offloading to host when there is only a single
  *         target and that target is the host.
  *   Fix a bug in InstructionSimplify pass where a compare of two constants of different sizes found
  *         in the optimization pass.  This fixes issue  #182 which was causing kokkos build failure.
  *   Fix openmp error message output for no_rocm_device_lib, was asserting.
  * New Feature:
  *   Added an example category for Kokkos.  The Kokkos example makefile detects if Kokkos is installed
  *       and builds Kokkos from the web if not. See the script kokkos_build.sh in the bin directory
  *       for how we build Kokkos.  Kokkos now builds cleanly with the OpenMP backend.  However,
  *       only simple test cases are working.
  * Development changes:
  *   Switch branch naming scheme to aomp11.  It was amd-stg-openmp.  This change applies to repos
  *       amd-llvm-project, aomp-extras, and flang.
  *   Add environment variables ROCM_LLD_ARGS ROCM_LINK_ARGS ROCM_SELECT_ARGS to test driver options
  *       without compiler rebuild. This is not an upstream change.
  *   Code reorganization in preparation for upstream:
  *   Rename libomptarget plugin from hsa to amdgpu following upstream.
  *   Merge hostrpc host and device library with libomptarget.
  *   Remove some memory management overhead in libomptarget plugin.
  *   Eliminate need for -lhostrpc during application link by merging with libomptarget.
  *   Remove multiple inessential differences from upstream across the toolchain.
  *
  *  11.11-1
  *
  *  Fix problems with device math functions being ambiguous, especially the
  *       pow function.
  *  Added smoke test called math_pow for checking all variants of pow and doing a
  *       sqrt(integer).
  *  New Makefile for KOKKOS example to properly clean up KOKKOS install
  *  Fix the slices.cpp and math_modf.cpp Makefile so they call clang++. Using
  *       clang on a cpp file causes the c++ personality not to be defined which results
  *       in an resolved reference at link time.
  *  Update shared variable linkage which further reduces differences between nvptx
  *       and amdgcn LLVM IR codegen.
  *
  * 11.11-2
  *  Move to ROCm 3.9 sources.
  *  Removal of hsa install directory. This required minor changes to build scripts
  *       of components that referenced hsa/include and hsa/lib.
  *  Minor build script updates including fix for lit checking on non-production builds.
  *  Support multiple devices with malloc and hostrpc.
  *  Tested A+A (AOMP11 and AOCC2.3) with smoke test lto_teams. This test case shows how to
  *       plugin the AOCC linker to the AOMP compiler which provides proprietary CPU link
  *       time optimizations only available in AOCC. It relies on a clang driver option to
  *       specify an alternative linker. The Makefile in this test case was updated to check
  *       for LLVM 12 compiler and use the correct clang option for the alternative linker.
  *       In LLVM 11 and before the alternative linker option was -fuse-ld=. In LLVM 12 and
  *       later it will be --ld-path=
  *  Improve hostrpc version check
  *  Added max reduction offload feature to flang
  *  Developer documentation updates including some cleanup of the source-build prerequisites.
  *  We now require a specific version of cmake built from source.
  *  We also require the mesa-common-dev package needed by rocclr (vdi).
  *  This release has packages for ppc64le. These packages have not been tested.
  *       Some fixes were applied to flang to support build on ppc64le. The rocclr (vdi)
  *       component is very x86_64 specific. So it would not build on ppc64le. Since HIP
  *       and OpenCL depend on rocclr, these components were not build for the ppc64le
  *       build. Only OpenMP should work on ppc64le.
  *
  * 11.12-0
  *  Add new testing from openlibm testing.  This tests the libm functions used for offloading in
  *       either openmp target region or hip kernel. It tests accuracy and exception situations.
  *  Integration of roctracer and rocprofiler.
  *  Integration of changes to support HPC Toolkit
  *  Fix for Devito .  This handles Lvalue References that are typically pointer to pointer kernel args.
  *  Support for fprintf.
  *  Fix a latent race between host runtime and devicertl
  *  Initial support for gpu malloc and free. The internal (device rtl) need for malloc and free
  *       is for nested parallelism.  This is used in two of our applications, possibly by accident.
  *       The initial implementation of malloc and free was broken. This change uses a malloc and free
  *       that uses hostrpc which is very slow.  Eventually we will develop the malloc and free hostrpc
  *       stubs to use a smart heap allocation scheme and only go to the host when the heap is consumed.
  *       This change will slow down the applications (snap) till a smarter malloc and free are implemented.
  *       This change just removes the broken malloc and free and improves the device memory footprint.
  *  Increase detail of debug printing controlled by LIBOMPTARGET_KERNEL_TRACE environment variable
  *  Support for Ubuntu 20.04.
  *  Move to ROCm 3.10 sources
  *  AOMP is no longer part of ROCm release starting with ROCM 4.0. OpenMP support in ROCm is part of the
  *       unified compiler. The unified compiler in ROCm is in the llvm-amdgpu package as of ROCm 3.9.
  *
  * 13.0-2
  *  Rebase all changes to the current LLVM development trunk which is the development of LLVM 13.
  *  Set the default number of teams to 4 times the number of computation units for improving GPU occupancy.
  *  Support for adjusting the number of threads in a team based on VGPR usage of a kernel
  *  Enhanced the kernel trace (when LIBOMPTARGET_KERNEL_TRACE is set) with register usage information.
          This already includes the requested and actual number of teams and threads used for a kernel.
  *  Updated ROCm components to 4.1.x branches.
  *  Default Code Object v4.
  * Known Issues:
  *  Regression with QMCPACK deterministic tests.
  *  pow(double, int) is returning -inf.
  *
  * 13.0-3
  *  Features:
  *  1. support for the --offload-arch option. Both cuda and hip offload kinds already support
  *       --offload-arch flag. One could think if it as an alias for --fopenmp-targets=TRIPLE
  *       -Xopenmp-target=TRIPLE -march=GPUNAME which greatly simplifies command line specification for
  *       OpenMP offloading. One only needs to  specify --offload-arch=GPUNAME.
  *  2. A new cross-architecture clang tool called 'offload-arch' will determine the current GPUNAME of an
  *       active system with a supported GPU card. There are a number of options. However, with no options
  *       it prints to stdout the GPUNAME. So this command could be used to compile foo.c for openmp offloading
  *       "clang -fopenmp --offload-arch=`offload-arch`"  Assuming $AOMP/bin is in your $PATH environment variable.
  *  3. New runtime checking now looks at available images and selects an image whose requirements are satisfied
  *       with runtime capabilities. Requirements include the GPUNAME and special compilation features that
  *       create an image that only works when a system is operating with the special capabilities. These special
  *       requirements form what is known as target-id.
  *  4. Archive files on the command line are now checked to see if they contain offloading code for the specified
  *       offload target  which are subsequently used to link the GPU image.
  *  Fixes:
  *  [flang] Resolved: cannot compile modules with private allocatable structs.
  *  Removed invalid header definition for log2 affecting Kokkos.
  *  QMCPACK unit tests now at 100% pass rate.
  *  Move hostcall required test to rtl, fix minor race.
  *  Centos 7 system headers had math functions with various return types for isnan/isinf, which caused
  *        conflicts with clang headers. Clang headers now use omp variants to resolve issue.
  *
  *  System Build
  *  Moved the construction of offloading libm from aomp-extras to openmp/libomptarget/deviceRTLs/libm.
  *       Currently the libm device library is only needed for FORTRAN because clang system headers have
  *       architecture specific definitions for math functions for c and c++. The build of libm builds bc files
  *       for GPU linking in  $AOMP/lib/libdevice/libm-<ARCH>-<GPUNAME>.bc. These are built using the clang system
  *       headers by changing each static definition to external definitions by setting __BUILD_MATH_BUILTINS_LIB__
  *
  *  Known issues to be resolved in 13.0-4
  *  aomp/examples failures:
  *       cloc/vector_copy_hip
  *       cloc/vector_copy_hip_omp
  *       hip/device_lib
  *       hip/writeIndex
  *  hip-openmp failures:
  *       aomp_hip_launch_test
  *       hip_host_register
  *  36 Clang lit tests failing
  *  RAJA build failure
  *
  * 13.0-4
  *   These are the release notes for AOMP_13.0-4. The source code base for this release is the upstream LLVM 13
  *       monorepo  main branch as of April 1, 2021 with hash value 0889181625bb570e463362ab8f53f9a14c886b2e.
  *       Updates from the aomp-stg-open repo were added as one commit per file difference as of April  6, 2021.
  *   Features:
  *   Support larger CU masks up to 128 bit or up to 128 CUs.
  *   Provide warning when HIP tries to use OpenMP offloading that this is not supported and target constructs
  *       will be ignored.
  *
  *   Fixes:
  *   Fixed examples/cloc/vector_copy_hip and vector_copy_hip_omp to use __HIP_PLATFORM_AMD__ from depracated
  *       __HIP_PLATFORM_HCC__.
  *   Fixed examples/hip/device_lib.
  *   Fixed examples/hip/writeIndex.
  *   Fixed test/hip-openmp/aomp_hip_launch_test. Bug in driver.cpp and new name for a.out file.
  *   Fixed test/hip-openmp/hip_host_register.
  *   Fixed hipcc when using noroot installs.
  *   Fixed host compilation picking up the wrong libomp.so on some systems.
  *   Fixed RPATH to include lib64.
  *   Fixed RAJA build issue.
  *   Fixed issue where targetID was not handled properly with march/fopenmp-targets.
  *
  *   Build changes:
  *   Turn on ROCT_ENABLE for openmp default build in addtion to openmp_debug build.
  *   Update list of gfx names to include gfx90a.
  *   Update list of NVPTX GPU names to : 30,35,37,50,52,53,60,61,62
  *
  *   Known Regressions:
  *   9 Clang lit test failures
  *
  *  13.0-5
  *   This release includes a demo of a new LLVM library called libLLVMOffloadArch.cpp.
  *       The clang tool offload-arch is now build with this library. The libomptarget runtime
  *       no longer calls the binary "offload-arch -c" and traps its stdout. Instead a library
  *       call is made to libLLVMOffloadArch.cpp to determine current capabilities. The tool
  *       offload-arch is still create with the llvm build but its sources are in
  *       llvm-project/llvm/lib/OffloadArch/offload-arch. Updates were made so offload-arch
  *       returns the first VISIBLE gpu which could be the result of setting ROCM_VISIBLE_DEVICES
  *       for amdgpus.
  *   This release starts to deprecate the use of mygpu in favor of offload-arch. A new version
  *   of mygpu calls offload-arch. The tables used to drive mygpu have been deleted. All pci-id
  *   tables for offloading identification are now in llvm library OffloadArch.
  *   Added a new command line option -offload-usm which turns on OpenMP pragma requires
  *       unified_shared_memory and sets  toolchain flags appropriately. This saves having to
  *       change every source file to turn on unified shared memory.
  *  Build changes:
  *  Update list of gfx names to include gfx1030 and gfx1031
  *  Known Issues:
  *  9 Clang lit test failures
  *  Long build times when large numbers of archive libraries are needed because toolchain must
  *       unbundle the archive for device linking.
  *
  *  13.0-6
  *   Update to ROCm 4.3 sources.
  *   Flang cmake race condition fixed.
  *
  *  14.0-0
  *   AOMP is now based on amd-stg-open branch.
  *   Most components are build from ROCm release 4.5 sources.
  *   Components are now cloned using a manifest file. The script clone_aomp.sh is still used to clone
  *       and update repos.
  *   New hip build method.
  *   Support for unified shared memory on gfx90a.
  *   Support for atomic hint clause to enable fast floating point atomics.
  *   Support for LLVM IR code generation with updated device RTL (deviceRTLs).
  *   Support for target ID with XNACK settings.
  *   Support for cross-platform offload device identification LLVM library and tool (offload-arch).
  *   Fixed many reduction problems and nested parallelism.
  *
  *  Known Issues:
  *   Slow CPU device-to-host data transfer speeds.
  *   Miniqmc, Kokkos, Raja fail to build.
  *   Non-deterministic failures in qmcpack deterministic tests.
  *   Possible incorrect linking of libclang-cpp.so in the build of libomptarget.so.
  *
  *  14.0-1
  *   A restructuring of the clang driver to a) remove the clang-build-select-link tool b) remove all
  *       "post" clang linking with mlink attributes on the clang -cc1 command.  All device library
  *       linking is now done in the llvm-link step which follows clang -cc1.  Furthermore, libraries
  *       including the critical libomptarget-..-.bc library are internalized by the llvm-link step to
  *       avoid unnecessary bit code for the backend.
  *   The construction of libomptarget-..-.bc library now includes rocm-device-lib functions, device
  *       libm functions, hostrpc stubs, and lastly the OpenMP deviceRTLs. This all-inclusive library
  *       simplifies the device toolchain and improves performance.
  *   Elimination of the need for the aomp-extras library.
  *
  *   Known issues:
  *   Compilation for nvidia GPUs is broken.  We will fix this in 14.0-2.
  *
  *  14.0-2
  *   Device runtime performance improvements by overlapping multiple copies between host and device.
  *   Inclusion of a static build of hwloc in libomp.so. This supports the use of PLACES for CPU affinity.
  *   Fixes to support compilation for nvptx64.
  *   Fix to support uninitialized integers for hostrpc support.
  *   Support for managed memory allocations in OpenMP.
  *   Fix to support optimization of constant indexes for shared memory arrays in a target region.
  *   Fix to resolve an unresolved global found in certain rocm-device-lib bitcode files.
  *
  *   Known issues:
  *   For badly formed custom mappers, host access to unmapped struct members causes segfault.
  *   Usage of flang -g results in differing debug_info_version and dwarf_version.
  *
  *  14.0-3
  *   Update to ROCm 5.0 components.
  *   Fix to libompd cmake to support enabling HWLOC.
  *
  *  15.0-0
  *   New development infrastructure support source build of supplemental components:
  *       There are two types of supplemental components, prerequisite and post-build components.
  *       All supplemental components are built and installed in subdirectories of a directory specified
  *       with the AOMP_SUPP environment variable which gets a default value of $HOME/local. Supplemental
  *       components are not included in the aomp installation package because they are for development,
  *       build, and test only. Prerequisite components are cmake, hwloc, and rocmsmilib. These are created
  *       with the build_prereq.sh script. Post-build components are for testing and require the AOMP or
  *       ROCm compiler to be installed. The current list of post-build supplemental components is:
  *       openmpi, hdf5, silo, and fftw. Post-build supplemental components are built with the
  *       build_supp.sh script.  build_prereq.sh is a symbolic link to build_supp.sh. For each component,
  *       the script fetches the source, builds the component, and then installs the components.
  *   Enhanced support for CU masking in the openmp_set_cu_mask wedge script. This now supports multiple
  *       devices and no longer requires that the number of CUs be a multiple of the number of ranks.
  *       If the total number of CUs is not a multiple of ranks, appropriate controls ensure each rank
  *       gets an equal set of CUs on some device.
  *   The AOMP release is done in concert with a ROCm AFAR compiler release.  The primary difference is
  *       that the AFAR compiler depends and works with an installed version of ROCm and installed as a
  *       tarball. AOMP is a standalone build and only depends on the amdgpu Linux kernel module and is
  *       installed with debian or rpm packages. The AFAR compiler for this release can be found at this
  *       URL XXXXXXXXXXXXXXXXXXXX
  *   Added new scripts to build and run GenASiS and GESTS applications which would scan the dependent
  *       libraries coming from build_supp.sh and use them to build and run the applications.
  *
  *  Performance Improvements
  *   A new type of GPU kernel called "no-loop" is created for simple target regions. Currently this is
  *       an opt-in feature because it ignores runtime environment variables that require additional loop logic.
  *  Reliability improvements
  *   Increase the maximum number of captured variables in a target region to 48 from 32. Future plans are
  *       to remove this maximum completely.
  *
  *  15.0-1
  *   Update to ROCm 5.1 sources.
  *
  *  15.0-2
  *   Add user requested hint value AMD_unsafe_fp_atomics to match AMD_fast_fp_atomics
  *   Fixes to compile SPEC CPU with A + A options
  *   Add implementation of omp_is_initial_device to the new OpenMP runtime.
  *   Add Fortran specific functions to the new OpenMP runtime. Classic flang compiler does not use the
  *       same OpenMP API as Clang and does not use __kmpc_parallel_51. This function is responsible
  *       for thread parallelization. __kmpc_parallel_51 increases parallel level and it launches parallel code.
  *   Updated cloc.sh in aomp-extras to pass bitcode for abi version.
  *   Fixed timing accuracy for OMPT target data transfer and kernel dispatch trace records
  *
  *  15.0-3
  *   Use the new openmp DeviceRTL by default.
  *   New DeviceRTL APIs for optimized cross-team reduction.
  *   Clang codegen changes to use the optimized cross-team reduction APIs for a reduction clause in a device construct.
  *   Added support for classic flang to use the new DeviceRTL.
  *
  *  Known Issues:
  *   Flang has issues at -O0 when using the new DeviceRTL on GPUs other than gfx90a.
  *   Nekbone app currently has performance issues due to the rpc thread being turned on.
  *
  *  16.0-0
  *   Adds new flag -fopenmp-target-fast to group enable a set of OpenMP target optimizations.
  *   Enhancements and bug fixes for No-Loop and cross-team reduction support.
  *
  *  16.0-1
  *   Enhanced xteam reductions, no codegen.
  *   Optimized wait for signals (perf gain).
  *   Fix aompcc and mark for deprecation.
  *   Added switch for code object version 5. Version 4 is still default.
  *   Support for gfx1100 - gfx1103.
  *   Support for order(concurrent).
  *   Build OpenMP warnings cleaned up.
  *   Upstream comparison data:
  *       Lines different: 63997
  *       Files different: 467
  *   Support atomic min/max on MI200.
  *   Support for device new and delete.
  *   Bumped cmake version to 3.18.5.
  *
  * 16.0-2
  *   Fix for early USM failure - openfoam does not hang.
  *   Enhance xteam reductions (with codegen). Support for integer data types.
  *   Fix for double _Complex scalars in target region,
  *      test/smoke-fails/double_complex_scalar now works. This test will move to smoke in next release.
  *   Support for target teams loop directive.
  *   Force synchronous execution of regions controlled via OMPX_FORCE_SYNC_REGIONS.
  *   New environment variable GPU_MAX_HW_QUEUES controls number of HSA queues created, default is 4.
  *      This change actually occurred in 16.0-1 but was not listed in release notes.
  *
  * 16.0-3
  *   Build includes gfx90c, gfx1035, and gfx1036.
  *   Fix to rocm_agent_enumerator to correctly identify gfx90c.
  *   Fix issue #435 "abs undefined within device block #435".
  *   More enhancements to xteam reductions .
  *   Ignore map clause option with USM.
  *   Additional support for OMPT functions "get_device_time" and "get_record_type".
  *   NUM_QUEUES_PER_DEVICE default to 1.
  *   Fixed clang-build-select-link to honor -fdisable-host-devmem.
  *   Fixed openmp lib-debug build overwriting release libraries/plugins.
  *   Updated cmake to 3.22.1.

 -- Greg Rodgers <Gregory.Rodgers@amd.com>  Thu, 19 May 2022 23:34:44 -0500
